#!/usr/bin/env python3

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2023 Hans Deragon - GPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.
#
# It is released under the GPL 3 licence which can be found at:
#
#     https://www.gnu.org/licenses/gpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

import os.path
import sys
import logging
import subprocess
import re

from datetime import datetime
import time
import getpass

import argparse

# os.path.realpath(os.curdir) # Current directory, canonical form.

scriptName=os.path.basename(sys.argv[0])
scriptPath=os.path.dirname(sys.argv[0])

scriptPathAbs=os.path.realpath(scriptPath)
scriptPathAbsParent=os.path.dirname(scriptPathAbs)

scriptNameAndPathAbs=scriptPathAbs + os.sep + scriptName

iso8601Human = time.strftime("%Y-%m-%d %H:%M:%S")

try:
    scriptNameBase=scriptName.rsplit('.', 1)[0] # Extension found.
except IndexError:
    scriptNameBase=scriptName # There is no extension.

# PARSING ARGUMENTS
# ────────────────────────────────────────────────────────────────────────────
#
# See:  https://docs.python.org/3/library/argparse.html
#
# WARNING:
#
# - and -- options are always optional according to argparse.  If you
# want mandatory arguments, they should not be prefixed with - or --.
#
# http://stackoverflow.com/questions/24180527/argparse-required-arguments-listed-under-optional-arguments

parser = argparse.ArgumentParser(description="""
\x1B[1;37;42m SAFE \x1B[0m

Give info on current user if no user passed as parameter.

For example, run:

    """ + scriptName + """  config.ini --export

""", formatter_class=argparse.RawTextHelpFormatter)

# Positional arguments.
# If <userNames> is mandatory, use "nargs='+'".  If optional, use "nargs='*'".
parser.add_argument('userNames', metavar='userNames', type=str, nargs='*',
                    help='List of files to rename.')

# Mandatory arguments.
# parser.add_argument('-d', '--dst', dest='dst', default='.', required=True,
#                     help='Destination where subdirectories will be created.')

# Optional arguments.
# action="store_true" means is that if the argument is given on the command
# line then a True value should be stored in the parser.
# parser.add_argument('--hardlink', dest='hardlink',
#                     default=False, action="store_true",
#                     help='Create hard links instead of moving files.')
#
parser.add_argument('-f', '--french', dest='french', default=False,
                    action="store_true", required=False,
                    help='Switch output to french.')

# Optional argument with parameter (--user USER).  By putting 'type=str', we
# tell the parser that the argument must take a parameter with it.
# parser.add_argument('-u', '--user', type=str, dest='user',
#                     default=os.environ["USER"], help='Provide user id.')

# Optional argument with choices.
# See:  https://stackoverflow.com/questions/40324356/python-argparse-choices-with-a-default-choice
# parser.add_argument('-t', '--type', dest='type', default="ascii7bits", required=False, type=str,
#                     nargs='?',
#                     choices=['ascii7bits', 'latin', 'digitAndLetters', 'digitAndLowerLetters', 'digitAndUpperLetters' ],
#                     help='Length of password generated.  Default is ascii7bits.')

parser.add_argument('-l', '--log-level', dest='loglevel', default='info',
       choices=['debug', 'info', 'warning', 'error', 'critical'],
       help='Set logs level.  Default is \'info\'.')

args = parser.parse_args()

if args.loglevel=="debug":
    level=logging.DEBUG
elif args.loglevel=="warning":
    level=logging.WARNING
elif args.loglevel=="error":
    level=logging.ERROR
elif args.loglevel=="critical":
    level=logging.CRITICAL
else:
    level=logging.INFO

if args.french:
    language = "fr"
else:
    language = "en"

# When setting the log level with logging.basicConfig(), the log level is set
# for ALL Python modules that using the logging facility, not just the code
# found in this script.  This is usually not desired.
#
# It is preferred to use a logger and set the log level only for it, so only
# its logs are showing, not that of other modules (very preferable when the
# log level is set to DEBUG).

# logging.debug("Test of logging %s", "here. :)")
logging.basicConfig(
    format='%(asctime)s - %(levelname)5s - %(funcName)20s(): %(message)s',
    datefmt=iso8601Human)

# Creating a logger with the script's name and setting it to a specific log
# level.
logger = logging.getLogger(scriptName)
logger.setLevel(level)
logger.debug("Test of logging %s", "here. :)")


if len(args.userNames) == 0:
    args.userNames.append(getpass.getuser())  # Use current user.


text =  {
           "en": {
                    "Group": "Group",
                 },

           "fr": {
                    "Group": "Groupe",
                 }
        }


def runDsCommand(command, failOnError):
    commandAsHuman=" ".join(command)
    logger.debug("command = >>%s<<", commandAsHuman)
    completedProcess = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    if failOnError and completedProcess.returncode != 0 :
        logger.error("Failed command with exit code #%d:  %s", completedProcess.returncode, commandAsHuman)
        sys.exit(completedProcess.returncode)

    output = completedProcess.stdout.decode('850').rstrip().replace('\r', '')
    logger.debug("output = >>%s<<", output)
    return (output, completedProcess.returncode)


def showUser(username: str):
    (userOU, exitcode) = runDsCommand([ "dsquery.exe",   "user", "-name", username ], True)
    userOU = userOU.strip('"')
    output=runDsCommand([ "dsget.exe",   "user", userOU, "-fn", "-ln", "-email" ], True)
    outputstdout = re.sub(r"dsget.*", "", output[0])
    print(f"Information:\n\n  {userOU}\n\n{outputstdout}")
    groups=sorted(runDsCommand([ "dsget.exe", "user", userOU, "-memberof" ], True)[0].split('\n'))
    groups="\n".join(groups)
    print(f"\n{text['fr']['Group']}s:\n\n" + str(groups))


firstTime = True
for userName in args.userNames:

    if not firstTime:
        print("\n\n")

    showUser(userName)
    firstTime = False
