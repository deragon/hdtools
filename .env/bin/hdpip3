#!/bin/bash

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2024 Hans Deragon - AGPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
# released under the GNU Affero General public Picense which can be found at:
#
#     https://www.gnu.org/licenses/agpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

SCRIPT_NAME="${BASH_SOURCE[0]/*\/}" # Basename, efficient form.

CMD="python3 -m pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org"

unset ANSI
if [ -t 1 ] ; then
  # STDOUT is a terminal.  Set ANSI.  If STDOUT is redirected, ANSI
  # remain unset and no ANSI codes are sent out.

  declare -Ag ANSI=(
    ["FG_WHITE_BG_GREEN"]="\e[1;37;42m"
    ["FG_BLACK_BG_YELLOW"]="\e[1;30;43m"
    ["FG_WHITE_BG_RED"]="\e[1;37;41m"
    ["FG_WHITE_BG_BLUE"]="\e[1;37;44m"
    ["FG_WHITE_BG_ORANGERED"]="\x1b[38;2;255;255;255m\x1b[48;2;255;69;0m"  # Requires True ANSI (24 bits) terminal.
    ["RESET"]="\e[0;00m"
    ["BOLD"]="\e[1m"
    ["ITALIC"]="\e[2m"
    ["UNDERLINE"]="\e[3m"
    ["REVERSE"]="\e[7m"
    ["STRIKETHROUGH"]="\e[9m"
    ["BOLD_OFF"]="\e[21m"
    ["ITALIC_OFF"]="\e[22m"
    ["UNDERLINE_OFF"]="\e[23m"
    ["REVERSE_OFF"]="\e[27m"
    ["STRIKETHROUGH_OFF"]="\e[29m"
    ["BLACK"]="\e[30m"
    ["RED"]="\e[31m"
    ["GREEN"]="\e[32m"
    ["YELLOW"]="\e[33m"
    ["BLUE"]="\e[34m"
    ["MAGENTA"]="\e[35m"
    ["CYAN"]="\e[36m"
    ["WHITE"]="\e[37m"
    ["BG_RED"]="\e[41m"
    ["BG_GREEN"]="\e[42m"
    ["BG_YELLOW"]="\e[43m"
    ["BG_BLUE"]="\e[44m"
    ["BG_MAGENTA"]="\e[45m"
    ["BG_CYAN"]="\e[46m"
    ["BG_WHITE"]="\e[47m"
    ["BG_DEFAULT"]="\e[49m"
  )
fi

usage()
{
  echo -e "
${ANSI[FG_WHITE_BG_GREEN]} SAFE ${ANSI[RESET]}

Install a Python 3 module as a user, trusting the source.

The actual command executed is:

  ${CMD} \$@

Usage:  ${SCRIPT_NAME} [-h] <python module to install>+ | -u

  -p  Upgrade pip instead of installing a module.
  -s  Install in system instead of user directory (--user)
  -h  Display this help text.
"
}



# ARGUMENT PARSING
# ════════════════════════════════════════════════════════════════════

UPGRADE_PIP=0
SYSTEM=0

OPTIND=1 # Normally not required, except if the script is sourced.
         # Better be safe than sorry.
while getopts "psh" OPTCMD; do
  case "${OPTCMD}" in
    "p")    UPGRADE_PIP=1;;
    "s")    SYSTEM=1;;
    "h"|*)  usage; exit 1;;
  esac
done

if (( ! SYSTEM )); then
  echo -e "${ANSI[FG_WHITE_BG_GREEN]} USER HOME INSTALLATION ${ANSI[RESET]}"
  CMD="${CMD} --user"
else
  echo -e "${ANSI[FG_BLACK_BG_YELLOW]} SYSTEM INSTALLATION ${ANSI[RESET]}"
fi

shift $((${OPTIND} - 1))  # Remove options from $@
IFS=$(echo -en "\n\b")    # Set IFS so if ARGUMENTS in $@ have spaces,
                          # we separate ARGUMENTS properly.

ARGUMENTS=("$@") # If you want the number of elements of $@, use $#



# VALIDATION
# ════════════════════════════════════════════════════════════════════

ERRORS=""

printErrorsAndExitIfAny()
{
  if [ ! -z "${ERRORS}" ]; then
    echo -e "${ANSI[FG_WHITE_BG_RED]}ERROR:${ANSI[RESET]}  The following errors where detected.\n"
    echo -e "${ERRORS}"
    echo -e "Command aborted."
    exit 1
  fi
}

if (( UPGRADE_PIP == 0 && ${#ARGUMENTS[*]} == 0 )); then
  ERRORS="${ERRORS} - You must provide at least one module to install.\n"
fi

printErrorsAndExitIfAny


# PROCESSING
# ────────────────────────────────────────────────────────────────────────────

if (( UPGRADE_PIP )); then
  echo "Upgrading pip."
  eval "${CMD} --upgrade pip"
else
  eval "${CMD} \$@"
fi
