#!/bin/bash

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2023 Hans Deragon - GPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.
#
# It is released under the GPL 3 licence which can be found at:
#
#     https://www.gnu.org/licenses/gpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

# This script was inspired from:
#
# https://stackoverflow.com/questions/645992/sleep-until-a-specific-time-date

SCRIPT_NAME="${BASH_SOURCE[0]/*\/}" # Basename, efficient form.

usage()
{
  echo -e "
\e[1;37;42m SAFE \e[0m  This command sleeps until the target date is attained.

Usage:  ${SCRIPT_NAME} [-h] <target date>

<target date> is the target date until this command should sleep too.

Exemples:

  ${SCRIPT_NAME} 11:34
  ${SCRIPT_NAME} 2025-01-01 23:00

Options:

  -h  Display this help text.
"
}


# ARGUMENT PARSING
# ════════════════════════════════════════════════════════════════════

QUIET=0

OPTIND=1 # Normally not required, except if the script is sourced.
         # Better be safe than sorry.
while getopts "qh" OPTCMD; do
  case "${OPTCMD}" in
    "q")    QUIET=1;;
    "h"|*)  usage; exit 1;;
  esac
done

shift $((${OPTIND} - 1))  # Remove options from $@
IFS=$(echo -en "\n\b")    # Set IFS so if FILES in $@ have spaces,
                          # we separate FILES properly.

TIME_TARGET="$@"



# COMMANDLINE VALIDATION
# ════════════════════════════════════════════════════════════════════

ERRORS=""

if [ -z "${TIME_TARGET}" ]; then
  ERRORS="${ERRORS} - Target date is missing.\n"
fi

if [ ! -z "${ERRORS}" ]; then
  echo -e "\e[1;37;41mERROR:\e[0m  The following errors where detected.\n"
  echo -e "${ERRORS}"
  echo -e "Command aborted."
  exit 1
fi



# PROCESSING
# ────────────────────────────────────────────────────────────────────────────

EPOCH_NOW="$(date +"%s")"

SLEEP_TIME=-1
DAY=0

# As long as SLEEP_TIME is negative, we add a day and retry.  Thus if it is
# currently 20:30 but the user entered 18:00, we will sleep until 18:00 the
# next day.
while (( SLEEP_TIME < 0 )); do
  let EPOCH_TARGET=$(date -d "${TIME_TARGET}" +"%s")+DAY*60*60*24
  SLEEP_TIME=$((EPOCH_TARGET-EPOCH_NOW))
  let DAY=DAY+1
done

TIME_TARGET="$(date --date="@${EPOCH_TARGET}" +"%Y-%m-%d %H:%M:%S")"
(( ! QUIET )) && echo "Sleeping until ${TIME_TARGET} (${SLEEP_TIME}s)"
sleep ${SLEEP_TIME}
