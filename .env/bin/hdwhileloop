#!/bin/bash
# Copyright 2000-2021 Hans Deragon - GPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.
#
# It is released under the GPL 3 licence which can be found at:
#
#     https://www.gnu.org/licenses/gpl-3.0.en.html

shopt -s expand_aliases
XMODIFIERS="HDENV"
source "${HOME}/.bashrc"

SCRIPT_NAME="${BASH_SOURCE[0]/*\/}" # Basename, efficient form.
SCRIPT_PATH_ABS=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")") # Fetch real directory, not symlink.  Spaces are well handled.
# SCRIPT_PATH_ABS=$(cd $(dirname $(ls -l "${SCRIPT_NAME}" | awk '{print$NF}')); pwd) # Equivalent of 'readlink -f', not available on AIX.

SCRIPT_NAME_BASE="${SCRIPT_NAME/.sh}"
SCRIPT_NAMEANDPATH_ABS="${SCRIPT_PATH_ABS}/${SCRIPT_NAME}"
SCRIPT_PATH_ABS_PARENT=$(dirname "${SCRIPT_PATH_ABS}")

TIMESTAMP_FORMAT_HUMAN="%Y-%m-%d %H:%M:%S"

usage()
{
  cat <<EOM
Simply run your provided command in the following while loop code:

  while((1)); do
    echo "══════════════════════════════════════════════════════════════════════════════"
    date +"${TIMESTAMP_FORMAT_HUMAN}"
    eval <command> <args>*
    sleep \${PAUSE_TIME}
  done

Usage:  ${SCRIPT_NAME} [-p <seconds>] [-h] <command> <args>*

  -p  Pause time expressed in seconds between iterations.  Default is 5s.
  -h  Display this help text.
EOM
}

# ARGUMENT PARSING
# ════════════════════════════════════════════════════════════════════

PAUSE_TIME=5 # Seconds

OPTIND=1 # Normally not required, except if the script is sourced.
         # Better be safe than sorry.
while getopts "p:h" OPTCMD; do
  case "${OPTCMD}" in
    "p")    PAUSE_TIME="${OPTARG}";;
    "h"|*)  usage; exit 1;;
  esac
done

shift $((${OPTIND} - 1))  # Remove options from $@
IFS=$(echo -en "\n\b")    # Set IFS so if FILES in $@ have spaces,
                          # we separate FILES properly.

# COMMANDLINE VALIDATION
# ════════════════════════════════════════════════════════════════════

ERRORS=""

if ((${#} == 0)); then
  ERRORS="${ERRORS} - You must provide at least one argument to run.\n"
fi

if [ ! -z "${ERRORS}" ]; then
  echo -e "ERROR:  The following errors where detected.\n"
  echo -e "${ERRORS}"
  echo -e "Command aborted."
  exit 1
fi


# PROCESSING
# ════════════════════════════════════════════════════════════════════

while((1)); do
  echo "══════════════════════════════════════════════════════════════════════════════"
  date +"${TIMESTAMP_FORMAT_HUMAN}"
  eval $@
  sleep ${PAUSE_TIME}
done
