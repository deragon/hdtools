#!/bin/bash

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2021 Hans Deragon - GPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.
#
# It is released under the GPL 3 licence which can be found at:
#
#     https://www.gnu.org/licenses/gpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

SCRIPT_NAME="${BASH_SOURCE[0]/*\/}" # Basename, efficient form.

usage()
{
  cat <<EOM
Usage:  ${SCRIPT_NAME} [-G] [-W] [-n] [-N] [-w] [-h]

  -G  Show Git format.     (Windows only)
  -W  Show Windows format. (Windows only)
  -O  Show Native (Original) format.

  -E  Show Escaped format.

  -n  Show network information.
  -N  Show mumeric IP.

  -w  Perform 'which' to find path to filename.

  -h  Show this help text.
EOM
}

NETWORK=0
SHOWIP=0
WHICH=0

FORMAT_NORMAL=0
FORMAT_WINDOWS=0
FORMAT_ESCAPED=0
FORMAT_NATIVE=0
FORMAT_GIT=0

OPTIND=1 # Normally not required, except if the script is sourced.
         # Better be safe than sorry.
while getopts "GWONEnwh" OPTCMD; do
  case "${OPTCMD}" in
    "G")    FORMAT_GIT=1;;
    "W")    FORMAT_WINDOWS=1;;
    "O")    FORMAT_NATIVE=1;;
    "E")    FORMAT_ESCAPED=1;;
    "n")    NETWORK=1;;
    "N")    SHOWIP=1;;
    "w")    WHICH=1;;
    "h"|*)  usage; exit 1;;
  esac
done

if (( (FORMAT_GIT    || FORMAT_WINDOWS || \
       FORMAT_NATIVE || FORMAT_ESCAPED) == 0 )); then
  # No format was explicitely set, thus showing them all.
  FORMAT_NORMAL=1
  FORMAT_GIT=1
  FORMAT_WINDOWS=1
  FORMAT_NATIVE=1
  FORMAT_ESCAPED=1
fi

shift $((${OPTIND} - 1))  # Remove options from $@
IFS=$(echo -en "\n\b")    # Set IFS so if entries in $@ have spaces,
                          # we separate entries properly.

unset EXTRAPATH
if [ $# -eq 0 ]; then
  EXTRAPATH="."
fi

unset NETWORK_INFO

if (( NETWORK )); then
  FQDN=$(hdhostname -f)
  NETWORK_INFO="${USER}@${FQDN}:"
fi

# Detect if stdout is sent to a console/terminal and add color if so.
if [ -t 1 ]; then
  COLOR_FGWHITE_BGRED="\e[1;37;41m"
  COLOR_RESET="\e[0m"
else
  COLOR_FGWHITE_BGRED=""
  COLOR_RESET=""
fi

printPathNormal()
{
  if ((FORMAT_NORMAL)); then
    NORMAL_PATH="${NETWORK_INFO}${CANONICAL_PATH}"
    echo -e "${NORMAL_PATH}${SUFFIX}"
  fi
}

printPathWithEscape()
{
  if ((FORMAT_ESCAPED)); then
    # Only print the escaped path if it is different than the normal
    # path.  If we do not do this, the same path would show up twice,
    # which is useless and not desired.
    ESCAPED_PATH=$(printf "%q\n" "${NETWORK_INFO}${CANONICAL_PATH}")
    if [ "${NORMAL_PATH}" != "${ESCAPED_PATH}" ]; then
      echo -e "${ESCAPED_PATH}${SUFFIX}"
    fi
  fi
}

printPathAllTypes()
{
  printPathNormal
  printPathWithEscape
}

# Running through remaining arguments
FIRST=1
for FILEORPATH in $@ "${EXTRAPATH}"; do

  [ -z "${FILEORPATH}" ] && break

  if (( WHICH )); then
    FILEORPATH="$(which "${FILEORPATH}")"
  fi

  if [ "${HD_OS_FAMILY}" == "Cygwin" ] && (( FIRST == 0 )); then
    # The separator is only necessary when under Cygwin, since we
    # print the file in numerous format.
    echo "----------------------------------------------------------------------"
  else
    FIRST=0
  fi

  FILEORPATH=$(realpath ${FILEORPATH})
  CANONICAL_PATH=`readlink -f "${FILEORPATH}"`

  if [ ! -e "${CANONICAL_PATH}" ]; then
    SUFFIX="  ${COLOR_FGWHITE_BGRED}Path does not exist.${COLOR_RESET}"
  else
    SUFFIX=""
  fi

  [ "${FORMAT_NATIVE}" == 1 ] && printPathAllTypes
  if (( SHOWIP )); then
    if [ "${HD_OS_FAMILY}" == "Cygwin" ]; then
      echo "Sorry, option -N is not implemented for Cygwin."
    else
      for IP in $(ip address | perl -ne 'print if s%\s+inet\s+(.*)/.*(wlo|eth).*%\1%g'); do
        NETWORK_INFO="${USER}@${IP}:"
        [ "${FORMAT_NATIVE}" == 1 ] && printPathAllTypes
      done
    fi
  fi

  if [[ "${HD_OS_FAMILY}" == *"WSL"* ]]; then
    CANONICAL_PATH="$(wslpath -a -w "${CANONICAL_PATH}")"
    (( FORMAT_NATIVE ))  && echo "${CANONICAL_PATH}"
    (( FORMAT_ESCAPED )) && printf "%q\n" "${CANONICAL_PATH}"
  elif [ "${HD_OS_FAMILY}" == "Cygwin" ]; then
    # Need to escape '\', thus the 'sed' command following 'cygpath'.
    CANONICAL_PATH="$(cygpath -w "${CANONICAL_PATH}" | sed 's/\\/\\\\/g')"
    [ "${FORMAT_WINDOWS}" == 1 ] && printPathNormal

    # Printing same path with '\' replaced with '/'.  This type of path format
    # is being used by Git for Windows command and Bash.
    CANONICAL_PATH="${CANONICAL_PATH//\\\\//}"
    [ "${FORMAT_GIT}" == 1 ] && printPathNormal

    if [[ ! "${CANONICAL_PATH}" == "\\\\"* ]] ; then
      # CANONICAL_PATH is not of format UNC (network).  Printing it now
      # in Uniform naming convention (UNC) format.

      NETWORK_DRIVE=$(net use $(echo "${CANONICAL_PATH:0:2}") 2>/dev/null | sed -n -r 's/.*\s+(\\\\.*)/\1/gp' | tr -d '\r')
      if [ ! -z "${NETWORK_DRIVE}" ]; then
        CANONICAL_PATH="${NETWORK_DRIVE}${CANONICAL_PATH:2}"
        [ "${FORMAT_WINDOWS}" == 1 ] && printPathNormal
      #else
        # Not a network drive, but a local one.  Showing it.
        # Doing nothing
        # CANONICAL_PATH="\\\\?\\${CANONICAL_PATH}"
      fi
    fi
  fi

done
