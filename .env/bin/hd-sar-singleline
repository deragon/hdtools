#!/usr/bin/env python3

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2022 Hans Deragon - GPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.
#
# It is released under the GPL 3 licence which can be found at:
#
#     https://www.gnu.org/licenses/gpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

import sys
import os
import stat
import getopt
import re
import sre_constants

from hdlib2 import *
from HDLib import *

# Test code
#walkRegEx(".", 2)
#sys.exit(0)

def processPath(path, regexPattern=None):
  path = os.path.abspath(path)
  path2String="***" + path[-50:-1]+path[-1]
  debug("path=" + path, 5)

  # Now we are ensure that we do not process twice the same path.
  # This can occur if the user gives multiple directories and at least
  # one is a subdirectory of another.
  if path in gsetProcessedPaths:
    return
  gsetProcessedPaths.add(path)

  if gExcludeRE.search(path):
    return

  if os.path.isdir(path):
    if gRecursive:
      for subpath in os.listdir(path):
        processPath(path + "/" + subpath, regexPattern)
    return

  # At this point, 'path' is a file, not a directory.
  mo1 = gFindSarRE.search(path)
  debug("mo1=" + str(mo1), 30)
  if regexPattern:
    mo2 = regexPattern.search(path)
  else:
    mo2 = None

  debug("mo2=" + str(mo2), 30)
  if mo1 or (regexPattern != None and not mo2):
    printSameLine("Ignored:".ljust(12) + path2String)
    return

  inName  = path
  tmpName = path + ".tmp.sar"
  orgName = path + ".sar"

  try:
    inFD  = open(inName,  'r')
  except IOError as ioerror:
    printNewLine("Error (jumping over):".ljust(12) + path2String + "  " + str(ioerror))
    return

  if not gDryMode:
    tmpFD = open(tmpName, 'w')
  isThereChanges = False
  while True:
    line=inFD.readline()
    newline=gMainRE.sub(gNewString, line)
    if not gDryMode:
      tmpFD.write(newline)

    if line != newline:
      isThereChanges = True

    if not line:
      break

  inFD.close()
  if not gDryMode:
    tmpFD.close()

  if isThereChanges:
    index = 0
    while True:
      index += 1
      if os.path.exists(orgName):
        orgName = inName + "." + str(index) + ".sar"
      else:
        break
    if not gDryMode:
      os.rename(inName, orgName)
      os.rename(tmpName, inName)

      # Now preserving permissions.
      mode=os.stat(orgName)
      permissions=stat.S_IMODE(mode[stat.ST_MODE])
      os.chmod(inName, permissions)

      if os.geteuid() == 0:
        # Now preserving ownership.  Since only root has the power
        # to change ownership, this is only executed if the user is EUID is 0.
        uid=mode[stat.ST_UID]
        gid=mode[stat.ST_GID]
        os.chown(inName, uid, gid)

    printNewLine("*Changed:".ljust(12) + path)
  else:
    printSameLine("Unchanged:".ljust(12) + path2String)
    if not gDryMode:
      os.unlink(tmpName)




######################################################################
# START OF MAIN
######################################################################

scriptname = os.path.basename(sys.argv[0])

def usage(exit=255):
  print("""
Usage:  """ + scriptname + """ [-r|--regex] [-R|--recursive]
        [-h|--help] [-d|--dry-run] [-z|--debug]
        <old string> <new string> <files>+

Example:  """ + scriptname + """ -r -R "([c|C])ar" "New \\1ar" 'somefile.*.txt'
""")
  sys.exit(exit)

gDryMode=False
gRecursive=False
gRegex=False

try:
  opts, args = getopt.gnu_getopt( \
      sys.argv[1:], "rRhdz:", \
      ["regex", "recursive",  "help", "dry-run", "debug="])
except getopt.GetoptError:
  # print help information and exit:
  usage()

for option, arg in opts:
  debug("argv option = " + option, 20)
  if option in ("-h", "--help"):
    usage()
    sys.exit()
  elif option in ("-d", "--dry-run"):
    print("Dry run mode enabled.")
    gDryMode=True
  elif option in ("-z", "--debug"):
    debug.setLevel(int(arg))
    print("Debug level set to " + arg)
  elif option in ("-r", "--regex"):
    print("Regular expression enabled.")
    gRegex=True
  elif option in ("-R", "--recursive"):
    print("Recursing through directories enabled.")
    gRecursive=True

debug("Arguments left:  " + str(args), 3)

erroroutput=""
bMissingParameter=False
try:
  gOldString=args[0]
except IndexError:
  erroroutput += "The mandatory <old string> parameter needs to be provided.\n"
  bMissingParameter=True

try:
  gNewString=args[1]
except IndexError:
  erroroutput += "The mandatory <new string> parameter needs to be provided.\n"
  bMissingParameter=True

# Fetching list of arguments with "[#:]" in a list will not throw
# an Index Error.  We need to test the length of the list returned.
gDirectoriesAndFiles=args[2:]
if len(gDirectoriesAndFiles) == 0:
  erroroutput += "The mandatory <files> parameter needs to be provided.\n"
  bMissingParameter=True

if bMissingParameter:
  print("ERROR:\n\n" + indent(erroroutput, 2))
  usage(1)

import curses
curses.setupterm()
# We need to substract 1 to the number of columns else erasing the whole
# line would cause an automatic carriage return to be performed as we
# hit the end of a line.
gColumnsToClear = curses.tigetnum('cols')-1

def printText(output, bSameLine=True):
  # rxvt-xpm is the terminal used by Cygwin (090625) and does not
  # properly support sameline printing.
  if debug.level > 0 or os.environ.get("COLORTERM") == "rxvt-xpm":
    print(output)
  elif bSameLine:
    output=output.ljust(gColumnsToClear)
    print("\r" + output, end=' ')
  else:
    output=output.ljust(gColumnsToClear)
    print("\r" + output)

def printSameLine(output):
  printText(output, True)

def printNewLine(output):
  printText(output, False)

if not gRegex:
  gOldString=re.escape(gOldString)

gMainRE=re.compile(gOldString)
gFindSarRE=re.compile(".*\.sar$")
gExcludeRE=re.compile(".*\.svn.*")
#greFileMatch=re.compile("")

gsetProcessedPaths = set()

# for path in gDirectoriesAndFiles:
#   status, paths = \
#     execute("find . -regextype posix-extended -iregex '" + path "'")
#   for path in lines:
#     processPath(path)

for path in gDirectoriesAndFiles:
  if os.path.isfile(path) or os.path.isdir(path):
    processPath(path)
  else:
    # path is actually a regular expression.  We set path to . and if
    # recursion is on, fetch all files under . that match the pattern given.
    try:
      regexPattern=re.compile(path)
      debug("regexPattern=" + str(regexPattern) + "  path= " + path, 20)
    except sre_constants.error:
      print("Path '" + path + "' is not a valid regular expression.  Aborting.")
      sys.exit(1)

    path="."
    processPath(path, regexPattern)

printSameLine("")
