#!/bin/bash

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2021 Hans Deragon - GPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.
#
# It is released under the GPL 3 licence which can be found at:
#
#     https://www.gnu.org/licenses/gpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

SCRIPT_NAME="${BASH_SOURCE[0]/*\/}" # Basename, efficient form.
SCRIPT_PATH_ABS=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")") # Fetch real directory, not symlink.  Spaces are well handled.

SCRIPT_NAME_BASE="${SCRIPT_NAME/.sh}"
SCRIPT_NAMEANDPATH_ABS="${SCRIPT_PATH_ABS}/${SCRIPT_NAME}"
SCRIPT_PATH_ABS_PARENT=`dirname "${SCRIPT_PATH_ABS}"`

usage()
{
  cat <<EOM
Usage:  ${SCRIPT_NAME} [-h] <file>+

Change the timestamp of a file using "\${GIT_AUTHOR_DATE}".

Specifically, the following timestamps are changed:

  Access (access)
  Modify (atime)

One timestamp that is not altered is 'Change (ctime)'.  Under Linux,
it is very hard to change it.  See below for links about this issue.
Thus, 'Change (ctime)' remains unchanged when this script is executed.

Links regarding 'Change (ctime)':

- https://unix.stackexchange.com/questions/2802/what-is-the-difference-between-modify-and-change-in-stat-command-context
- https://stackoverflow.com/questions/40630695/linux-modify-file-modify-access-change-time


EOM
}



# ARGUMENT PARSING
# ════════════════════════════════════════════════════════════════════

OPTIND=1 # Normally not required, except if the script is sourced.
         # Better be safe than sorry.
while getopts "h" OPTCMD; do
  case "${OPTCMD}" in
    "h"|*)  usage; exit 1;;
  esac
done

shift $((${OPTIND} - 1))  # Remove options from $@
IFS=$(echo -en "\n\b")    # Set IFS so if FILES in $@ have spaces,
                          # we separate FILES properly.

FILES=("$@") # If you want the number of elements of $@, use $#

# COMMANDLINE VALIDATION
# ════════════════════════════════════════════════════════════════════

ERRORS=""

if ((${#FILES[*]} == 0)); then
  ERRORS="${ERRORS} - You must provide at least one argument.\n"
fi

if [ ! -z "${ERRORS}" ]; then
  echo -e "\e[1;37;41mERROR:\e[0m  The following errors where detected.\n"
  echo -e "${ERRORS}"
  echo -e "Command aborted.\n"
  usage
  exit 1
fi

TIMESTAMP_USED=$(echo ${GIT_AUTHOR_DATE} | perl -pe 's/\D//g;s/\d{4}$//g')
TIMESTAMP_USED=$(echo ${GIT_AUTHOR_DATE} | perl -pe 's/\D//g;s/\d{4}$//g;s/(\d\d)$/.\1/g')

# Running through remaining arguments
for FILE in ${FILES[@]}; do
  echo "────────────────────────────────────────────────────────"
  echo -e "access & atime set to ${GIT_AUTHOR_DATE} for '${FILE}'.\n"
  touch -t "${TIMESTAMP_USED}" "${FILE}"
  stat "${FILE}"
done
