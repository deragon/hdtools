#!/bin/bash

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2024 Hans Deragon - AGPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
# released under the GNU Affero General public Picense which can be found at:
#
#     https://www.gnu.org/licenses/agpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

# From http://www.michael-noll.com/blog/2013/03/17/reading-and-writing-avro-files-from-the-command-line

SCRIPT_NAME="${BASH_SOURCE[0]/*\/}" # Basename, efficient form.
SCRIPT_PATH_ABS="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" # Fetch real directory, not symlink.  Spaces are well handled.

SCRIPT_NAME_BASE="${SCRIPT_NAME/.sh}"
SCRIPT_NAMEANDPATH_ABS="${SCRIPT_PATH_ABS}/${SCRIPT_NAME}"
SCRIPT_PATH_ABS_PARENT=`dirname "${SCRIPT_PATH_ABS}"`

usage()
{
echo -e "
\e[1;37;42m SAFE \e[0m

Usage:  ${SCRIPT_NAME} [-s <schema prefix] <Avro file>*

  Extract the schema from the Avro file, saving it into json format.

  <Avro file>      Avro input file containing the data.  If no filename
                   provided, data is read from stdin.

  <schema prefix>  Optional prefix for filename to use to generate the schema.
                   If not provided, the input filename basename (without
                   its extension) will be used.

  HD_AVRO_JAR environment variable must be defined, pointing to the Avro jar
  file (avro-tools-*.jar)
"
}

unset SCHEMA_PREFIX
OPTIND=1 # Normally not required, except if the script is sourced.
         # Better be safe than sorry.
while getopts "s:h" OPTCMD; do
  case "${OPTCMD}" in
    "s")    SCHEMA_PREFIX="${OPTARG}";;
    "h"|*)  usage; exit 1;;
  esac
done

shift $((${OPTIND} - 1))  # Remove options from $@
IFS=$(echo -en "\n\b")    # Set IFS so if entries in $@ have spaces,
                          # we separate entries properly.

FILES=("$@") # If you want the number of elements of $@, use $#

ERRORS=""

if [ -z "${HD_AVRO_JAR}" ]; then
  ERRORS="${ERRORS} - HD_AVRO_JAR environment variable must be defined, pointing to the Avro jar file (avro-tools-*.jar)\n"
fi

# if (( $# != 2 )); then
#   ERRORS="${ERRORS} - The number of arguments is not valid.\n"
# fi

if [ ! -z "${ERRORS}" ]; then
  echo -e "\e[1;37;41mERROR:\e[0m  The following errors where detected.\n"
  echo -e "${ERRORS}"
  echo -e "Command aborted.\n"
  usage
  exit 1
fi


# title()
# ────────────────────────────────────────────────────────────────────────────
#
#  call:  title "Test #1"
#  stdout:  ═ Test #1 2020-02-21 11:22:51 ════════════════════════════════════════════════════
title()
{
  local LINE="═══════════════════════════════════════════════════════════════════════════════"
  local TITLE="${1} "$(date "+${TIMESTAMP_FORMAT_HUMAN}")
  local SEPARATOR=$(printf "%s %s %s\n" "${LINE:1:1}" "${TITLE}" "${LINE:${#TITLE}}")
  echo "${SEPARATOR}"
}


# PROCESSING
# ────────────────────────────────────────────────────────────────────────────

# STDIN OR FILES
#
# If no file has been provided, set one file as STDIN (-).  This way,
# either files passed as arguments are processed or STDIN.
if (( ${#FILES[*]} == 0 )); then
  FILES[0]="-"
fi

# Running through remaining arguments
for FILE in ${FILES[@]}; do

  (( ${#FILES[*]} > 1 )) && title "Processing ${FILE}"

  EXTENSION="${FILE##*.}"
  FILENAME="${FILE%.*}"
  if [ -z "${SCHEMA_PREFIX}" ]; then
    SCHEMA_FILE="${FILENAME}.avsc"
  else
    SCHEMA_FILE="${SCHEMA_PREFIX}.avsc"
  fi

  java -jar "${HD_AVRO_JAR}" getschema "${FILE}" >"${SCHEMA_FILE}"
  echo "Generated:  '${SCHEMA_FILE}'"

done
