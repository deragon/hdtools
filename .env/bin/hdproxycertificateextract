#!/usr/bin/env python3

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2025 Hans Deragon - AGPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
# released under the GNU Affero General Public License which can be found at:
#
#     https://www.gnu.org/licenses/agpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

import os.path
import pathlib
import sys
import re
import logging

from datetime import datetime

import argparse
from argparse import RawTextHelpFormatter

# os.path.realpath(os.curdir) # Current directory, canonical form.

scriptPath=os.path.dirname(sys.argv[0])
scriptName=os.path.basename(sys.argv[0])

scriptPathAbs=os.path.realpath(scriptPath)
scriptPathAbsParent=os.path.dirname(scriptPathAbs)

scriptNameAndPathAbs=scriptPathAbs + os.sep + scriptName

try:
  scriptNameBase=scriptName.rsplit('.', 1)[0] # Extension found.
except IndexError:
  scriptNameBase=scriptName # There is no extension.



# https_proxy setting
# ────────────────────────────────────────────────────────────────────────────
#
#  Setting the variable https_proxy very early so it can be used in the text
#  for usage / help (-h).

errors = ""
try:
    https_proxy = os.environ["https_proxy"]
    https_proxy = re.sub("http[s]*://", "", https_proxy)
except KeyError:
    https_proxy = "<${https_proxy} is not set>"
    errors += "\n  Environment variable \x1B[1;37;44m${https_proxy}\x1B[0m is not configured."



# PARSING ARGUMENTS
# ────────────────────────────────────────────────────────────────────────────
#
# See:  http://docs.python.org/2/library/argparse.html
#
# WARNING:
#
# - and -- options are always optional according to argparse.  If you
# want mandatory arguments, they should not be prefixed with - or --.
#
# http://stackoverflow.com/questions/24180527/argparse-required-arguments-listed-under-optional-arguments


parser = argparse.ArgumentParser(description=f"""

Extract all the certificates found by pooling the proxy set in the
$https_proxy environment variable pointing to:

  $https_proxy={https_proxy}

""", formatter_class=RawTextHelpFormatter)

parser.add_argument('-d', '--directory', type=str, dest='directory',
                    default=f"/tmp/{scriptName}",
                    help='Directory to which certificate should be saved into.')

parser.add_argument('--debug', dest='debug', default=False, action="store_true", help='Debug level logs enabled.')
parser.add_argument('--info' , dest='info' , default=False, action="store_true", help='Info level logs enabled.')
parser.add_argument('--error', dest='error', default=False, action="store_true", help='Error level logs enabled.')

args = parser.parse_args()

if args.debug == True:
  logging.basicConfig(level=logging.DEBUG)
elif args.info == True:
  logging.basicConfig(level=logging.INFO)
elif args.error == True:
  logging.basicConfig(level=logging.ERROR)
else:
  logging.basicConfig(level=logging.WARNING)

pathlib.Path(args.directory).mkdir(parents=True, exist_ok=True)

if len(errors) > 0:
  print("\x1B[1;37;41mERROR:\x1B[0m  The following errors where detected.\n" + errors + "\n\nCommand aborted.")
  sys.exit(1)

logger = logging.getLogger(scriptName)


# For full 'openssl' command explanation, see:
# https://stackoverflow.com/questions/44119030/download-ssl-corproate-proxy-cert-via-linux-cli
# www.example.com or any other site can do; it is not important and does not
# show up in the output.
#
# In Bash, you can run the following to reproduce the command:
#
#   echo QUIT | openssl s_client -showcerts -proxy "${https_proxy/*:\/\//}" -connect www.example.com:443
cmd = ["openssl", "s_client", "-showcerts", "-proxy", https_proxy, "-connect", "www.example.com:443" ]

logging.debug("Command executed:  " + " ".join(cmd))
from subprocess import Popen, PIPE
p = Popen(cmd, stdout=PIPE, stdin=PIPE, stderr=PIPE)

# Openssl hangs, waiting for a keypress before exiting.  Solution is to send
# the "QUIT" command on STDIN.
# See:  https://stackoverflow.com/questions/9450120/openssl-hangs-and-does-not-exit/9471788
result = p.communicate(input='QUIT'.encode())

stdout=result[0].decode('utf-8')
stderr=result[1].decode('utf-8')

logging.debug("STDOUT -->\n\n" + stdout)

lines = stdout.split("\n")
logging.debug(str(lines))

in_certificate = False
certificate = []

cn_regex=re.compile(r".*CN\s=\s(\S+).*")

for index, line in enumerate(lines):

    if line == "-----BEGIN CERTIFICATE-----":
        in_certificate = True
        logging.debug("line-2:  " + lines[index-2])
        matches = cn_regex.match(lines[index-2])
        if matches == None:
            print("ERROR matching.")
            sys.exit(4)

        certificate_name=matches.group(1).replace(",", "")
        continue
    elif line == "-----END CERTIFICATE-----":
        fileName=args.directory + os.path.sep + certificate_name + ".pem"
        print(f"Writing found certificate into file:  {fileName}")

        fileOutput = open(fileName ,'w')
        fileOutput.write("\n".join(certificate))
        fileOutput.close()

        in_certificate = False
        certificate = []
        continue

    if in_certificate:
      certificate.append(line)
