#!/usr/bin/env python3
# Copyright 2000-2021 Hans Deragon - GPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.
#
# It is released under the GPL 3 licence which can be found at:
#
#     https://www.gnu.org/licenses/gpl-3.0.en.html

# WARNING:
#
# This script is far from perfect.  It makes use of os.walk that reads
# in memory all the files.  Thus if you have say 30E06 files, this script
# will consume Gib of memories.
#
# Python is missing a feature which would allow to scan a directory
# without loading all of its content in memory.
#
# This issue is:  http://bugs.python.org/issue11406

import os.path
import sys
import argparse
import xml.etree.ElementTree as xml

# os.path.realpath(os.curdir) # Current directory, canonical form.

script_path=os.path.dirname(sys.argv[0])
script_name=os.path.basename(sys.argv[0])

script_path_abs=os.path.realpath(script_path)

script_nameandpath_abs=script_path_abs + os.sep + script_name

try:
  script_name_base=script_name.rsplit('.', 1)[0] # Extension found.
except IndexError:
  script_name_base=script_name # There is no extension.

script_path_abs_parent=os.path.dirname(script_path_abs)


parser = argparse.ArgumentParser(description='Extract xml child from provided xml ')

parser.add_argument('file', metavar='file', type=str,
                    help='XML file to parse.')

parser.add_argument('tag', metavar='tag', type=str,
                    help='Tag to search for in XML file.')
# parser.add_argument('--dst', dest='dst', default='.',
#                     help='Destination where subdirectories will be created.')
# parser.add_argument('--hardlink', dest='hardlink', 
#                     default=False, action="store_true",
#                     help='Create hard links instead of moving files.')
# parser.add_argument('--softlink', dest='softlink',
#                     default=False, action="store_true",
#                     help='Create soft links instead of moving files.')
# parser.add_argument('--split', dest='split', default=10,
#                     help='Number of split to perform.')

args = parser.parse_args()

errors=""

if args.file == None:
  errors=errors+" - You must provide an XML file."

if len(errors) > 0:
  print("ERROR:  The following errors were detected:\n" + errors)
  print("\nCommand aborted.")
  sys.exit(1)

xmlRoot = xml.parse(args.file).getroot()

for child in xmlRoot:
  if args.tag in child.tag:
    print(child.text)
