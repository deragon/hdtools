#!/bin/bash

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2023 Hans Deragon - GPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.
#
# It is released under the GPL 3 licence which can be found at:
#
#     https://www.gnu.org/licenses/gpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

# Script inspired from:
# https://stackoverflow.com/questions/5566310/how-to-recursively-find-and-list-the-latest-modified-DIRECTORIES-in-a-directory-with-s

SCRIPT_NAME="${BASH_SOURCE[0]/*\/}" # Basename, efficient form.
SCRIPT_PATH_ABS="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" # Fetch real directory, not symlink.  Spaces are well handled.

SCRIPT_NAME_BASE="${SCRIPT_NAME/.sh}"
SCRIPT_NAMEANDPATH_ABS="${SCRIPT_PATH_ABS}/${SCRIPT_NAME}"
SCRIPT_PATH_ABS_PARENT=$(dirname "${SCRIPT_PATH_ABS}")



usage()
{
  echo -e "
\e[1;37;42m SAFE \e[0m  Show the earliest or latest DIRECTORIES in descending orders of the date of their last modification.

Usage:  ${SCRIPT_NAME} [-l|-e] [-f] [-n <# of DIRECTORIES>] [-m <maxdepth>] [-h] <directory>+

  -l  latest (default)
  -e  earliest
  -m  <maxdepth> (default ∞)
  -f  Format of stats
  -p  Show only paths, one per line
  -n  Number of DIRECTORIES to show (default 20)
      Set to 0 for NO LIMITS.
  -h  Display this help text.
"
}



# DEFAULTS
# ════════════════════════════════════════════════════════════════════
NUMBER="20"
TYPE="latest"
FILENAMES_ONLY_FILTER=""
MAXDEPTH="255"

# 'stat' format
# ────────────────────────────────────────────────────────────────────
#
#   %Y     time of last data modification, seconds since Epoch.
#
#   %y     time of last data modification, human-readable.
#
#   %s     total size, in bytes.
#
#   %n     file name (including path)
FORMAT='%y %12s "%n"'



# ARGUMENT PARSING
# ════════════════════════════════════════════════════════════════════

OPTIND=1 # Normally not required, except if the script is sourced.
         # Better be safe than sorry.
while getopts "lf:pen:m:h" OPTCMD; do
  case "${OPTCMD}" in
    "l")    TYPE="latest";;
    "p")    FORMAT="%n";;
    "f")    FORMAT="${OPTARG}";;
    "e")    TYPE="earliest";;
    "n")    NUMBER="${OPTARG}";;
    "m")    MAXDEPTH="${OPTARG}";;
    "h"|*)  usage; exit 1;;
  esac
done

shift $((${OPTIND} - 1))  # Remove options from $@
IFS=$(echo -en "\n\b")    # Set IFS so if DIRECTORIES in $@ have spaces,
                          # we separate DIRECTORIES properly.

DIRECTORIES=("$@") # If you want the number of elements of $@, use $#

(( ${#DIRECTORIES[*]} == 0 )) && DIRECTORIES="."



# COMMANDLINE VALIDATION
# ════════════════════════════════════════════════════════════════════

ERRORS=""

if ! [[ "${NUMBER}" =~ ^[0-9]+$ ]]; then
  ERRORS="${ERRORS} - Number of DIRECTORIES to show (${NUMBER}) is not a positive integer.\n"
fi

if [ ! -z "${ERRORS}" ]; then
  echo -e "\e[1;37;41mERROR:\e[0m  The following errors where detected.\n"
  echo -e "${ERRORS}"
  echo -e "Command aborted."
  exit 1
fi

(( NUMBER == 0 )) && NUMBER=2147483648 # 2**31, maximum of an integer.


# PROCESSING
# ════════════════════════════════════════════════════════════════════

if [ "${TYPE}" == "latest" ]; then
  HEADTAIL_CMD="head"
else
  HEADTAIL_CMD="tail"
fi

# Algorithm
# ────────────────────────────────────────────────────────────────────────────
#
#   The format is prepended with '%Y' witch prints out the seconds since
#   Epoch.  With the following 'sort -nr', the files are then sorted from most
#   recent to least.
#
#   The following 'sed' command removes the added seconds since Epoch from the
#   output and if "${FORMAT}" includes human-readable dates, nanoseconds and
#   the timezone are removed from them.
eval "
  find \"${DIRECTORIES[@]}\" -maxdepth ${MAXDEPTH} -type f -print0 |
  xargs --null stat --format '%Y|${FORMAT}' |
  sort -nr |
  sed -r 's/.*?\|//g;s/([[:digit:]]+:[[:digit:]]+:[[:digit:]]+)\.[[:digit:]]+ .[[:digit:]]+/\1/g' |
  ${HEADTAIL_CMD} -n ${NUMBER}"
