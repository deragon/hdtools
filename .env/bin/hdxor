#!/usr/bin/env python3

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2022 Hans Deragon - GPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.
#
# It is released under the GPL 3 licence which can be found at:
#
#     https://www.gnu.org/licenses/gpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

import os.path
import sys
import logging

from datetime import datetime

import argparse
from argparse import RawTextHelpFormatter

# os.path.realpath(os.curdir) # Current directory, canonical form.


scriptPath=os.path.dirname(sys.argv[0])
scriptName=os.path.basename(sys.argv[0])

logger = logging.getLogger(scriptName)

scriptPathAbs=os.path.realpath(scriptPath)
scriptPathAbsParent=os.path.dirname(scriptPathAbs)

scriptNameAndPathAbs=scriptPathAbs + os.sep + scriptName

try:
  scriptNameBase=scriptName.rsplit('.', 1)[0] # Extension found.
except IndexError:
  scriptNameBase=scriptName # There is no extension.



# PARSING ARGUMENTS
# ────────────────────────────────────────────────────────────────────────────
#
# See:  http://docs.python.org/2/library/argparse.html
#
# WARNING:
#
# - and -- options are always optional according to argparse.  If you
# want mandatory arguments, they should not be prefixed with - or --.
#
# http://stackoverflow.com/questions/24180527/argparse-required-arguments-listed-under-optional-arguments

parser = argparse.ArgumentParser(description="""
\x1B[1;37;41mIMPLEMENTATION NOT COMPLETE\x1B[0m

\x1B[1;37;41mWARNING:\x1B[0m  XOR is not a safe cipher.  Depending of the data to encrypt, the
          password could easily be found.

          See:  https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption

For example, run:

    """ + scriptNameBase + """  config.ini --export

""", formatter_class=RawTextHelpFormatter)

# Positional arguments definition here.
parser.add_argument('files', metavar='<files to XOR>',
                    type=str,  nargs='+', help='Files to apply XOR.')
# parser.add_argument('files', metavar='files', type=str, nargs='+',
#                     help='List of files to rename.')
# parser.add_argument('-d' '--dst', dest='dst', default='.', required=True,
#                     help='Destination where subdirectories will be created.')
# parser.add_argument('--hardlink', dest='hardlink',
#                     default=False, action="store_true",
#                     help='Create hard links instead of moving files.')
# parser.add_argument('--softlink', dest='softlink',
#                     default=False, action="store_true",
#                     help='Create soft links instead of moving files.')
# parser.add_argument('-s', '--split', dest='split', default=10, required=False,
#                     help='Number of split to perform.')

parser.add_argument('-d', '--debug', dest='debug', default=False, action="store_true", help='Debug level logs enabled.')
parser.add_argument('-i', '--info' , dest='info' , default=False, action="store_true", help='Info level logs enabled.')
parser.add_argument('-e', '--error', dest='error', default=False, action="store_true", help='Error level logs enabled.')

args = parser.parse_args()

if args.debug == True:
  logging.basicConfig(level=logging.DEBUG)
elif args.info == True:
  logging.basicConfig(level=logging.INFO)
elif args.error == True:
  logging.basicConfig(level=logging.ERROR)
else:
  logging.basicConfig(level=logging.WARNING)

errors=""

# if args.hardlink == True and args.softlink == True:
#   errors += "\n  --hardlink and --softlink are mutually exclusive.  You must chose one."

if len(errors) > 0:
  print("\x1B[1;37;41mERROR:\x1B[0m  The following errors where detected.\n" + errors + "\n\nCommand aborted.")
  print("\x1B[1;37;41mERREUR:\x1B[0m  Les erreurs suivantes furent détectées.\n" + errors + "\n\nCommande avortée")
  sys.exit(1)

print(args)

logging.debug("Test of logging %s", "here. :)")
logger.debug("Test of logging %s", "here. :)")


# READ AND WRITE TO A FILE
# ────────────────────────────────────────────────────────────────────────────

indexStart=0
indexEnd=2**32

for file in args.files:
    index=0
    inputFD  = open(file,         "rb")
    outputFD = open(file + ".xor", "wb")
    try:
        while True:
            byte = inputFD.read(1)
            if not byte:
                break
            if index % 2 and index >= indexStart and index <= indexEnd:
                byte_xored=bytes([ byte[0] ^ 0xAB ])
            else:
                byte_xored=byte
            outputFD.write(byte_xored)
            index += 1
            #logger.debug("index = " + str(index))
    finally:
        inputFD.close()
        outputFD.close()
