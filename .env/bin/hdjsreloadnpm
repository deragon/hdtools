#!/bin/bash
# Copyright 2000-2021 Hans Deragon - GPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.
#
# It is released under the GPL 3 licence which can be found at:
#
#     https://www.gnu.org/licenses/gpl-3.0.en.html

SCRIPT_NAME="${BASH_SOURCE[0]/*\/}" # Basename, efficient form.
SCRIPT_PATH_ABS=`dirname $(readlink -f "${BASH_SOURCE[0]}")` # Fetch real directory, not symlink.

SCRIPT_NAME_BASE="${SCRIPT_NAME/.sh}"
SCRIPT_NAMEANDPATH_ABS="${SCRIPT_PATH_ABS}/${SCRIPT_NAME}"
SCRIPT_PATH_ABS_PARENT=`dirname "${SCRIPT_PATH_ABS}"`

usage()
{
  cat <<EOM
Usage:  ${SCRIPT_NAME} [-d <root directory to scan>]

        -d <root directory to scan>    Default is '.'


        This script scans from the provided root directory (or '.') for any
        'package.json' file not residing in a 'node_modules' directory,
        deletes then the 'node_modules' directory residing in the same path as
        the 'package.json' and then initiate a 'npm install' to recreate the
        'node_modules' directly.

        This procedure clean up 'node_modules' directory from accumulated
        crust.
EOM
}

DIRECTORY="."

OPTIND=1 # Normally not required, except if the script is sourced.
         # Better be safe than sorry.
while getopts "d:h" OPTCMD; do
  case "${OPTCMD}" in
    "d")    DIRECTORY="${OPTARG}";;
    "h"|*)  usage; exit 1;;
  esac
done

shift $((${OPTIND} - 1))  # Remove options from $@
IFS=$(echo -en "\n\b")    # Set IFS so if entries in $@ have spaces,
                          # we separate entries properly.

# # Running through remaining arguments
# for ARGUMENT in $@; do
# done
# 
# ERRORS=""
# 
# if (( "$#" == 0 )); then
#   ERRORS="${ERRORS} - You must provide at least one argument.\\n"
# fi
# 
# if [ -z "${ENV}" ]; then
#   ERRORS="${ERRORS} - Environment must be provided.  Example: '-e acc'.\\n"
# fi
# 
# if [ ! -z "${ERRORS}" ]; then
#   echo -e "ERROR:  The following errors where detected.\\n"
#   echo -e "${ERRORS}"
#   echo -e "Command aborted."
#   exit 1
# fi

echo "Scanning directory '${DIRECTORY}'"

for PACKAGE_PATH in $(find "${DIRECTORY}" -name "package.json" -and -not -path "*/node_modules/*"); do
  #PACKAGE_FILENAME="${PACKAGE_PATH/*\/}" # Basename, efficient form.
  PACKAGE_DIR=`dirname $(readlink -f "${PACKAGE_PATH}")` # Fetch real directory, not symlink.
  echo -e "\n══════════════════════════════════════════════════════════════════════════════"
  echo -e "Processing ${PACKAGE_DIR}\n"
  rm -rf "${PACKAGE_DIR}/node_modules"
  cd "${PACKAGE_DIR}"
  npm install
  cd -
done
