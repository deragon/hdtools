#!/usr/bin/env python3

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2024 Hans Deragon - AGPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
# released under the GNU Affero General public Picense which can be found at:
#
#     https://www.gnu.org/licenses/agpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

import os.path
import sys
import logging
import subprocess
import re

import argparse

# os.path.realpath(os.curdir) # Current directory, canonical form.

scriptName=os.path.basename(sys.argv[0])
scriptPath=os.path.dirname(sys.argv[0])

scriptPathAbs=os.path.realpath(scriptPath)
scriptPathAbsParent=os.path.dirname(scriptPathAbs)

scriptNameAndPathAbs=scriptPathAbs + os.sep + scriptName

try:
    scriptNameBase=scriptName.rsplit('.', 1)[0] # Extension found.
except IndexError:
    scriptNameBase=scriptName # There is no extension.

# PARSING ARGUMENTS
# ────────────────────────────────────────────────────────────────────────────
#
# See:  https://docs.python.org/3/library/argparse.html
#
# WARNING:
#
# - and -- options are always optional according to argparse.  If you
# want mandatory arguments, they should not be prefixed with - or --.
#
# http://stackoverflow.com/questions/24180527/argparse-required-arguments-listed-under-optional-arguments

parser = argparse.ArgumentParser(description="""
\x1B[1;37;42m SAFE \x1B[0m

Read a .ini file and export its full content in variables that Bash can make use of.

For example, run:

    """ + scriptName + """  config.ini --export

""", formatter_class=argparse.RawTextHelpFormatter)

# Positional arguments.
# If <groupNames> is mandatory, use "nargs='+'".  If optional, use "nargs='*'".
parser.add_argument('groupNames', metavar='groupNames', type=str, nargs='+',
                    help='List of files to rename.')

# Mandatory arguments.
# parser.add_argument('-d', '--dst', dest='dst', default='.', required=True,
#                     help='Destination where subdirectories will be created.')

# Optional arguments.
# action="store_true" means is that if the argument is given on the command
# line then a True value should be stored in the parser.
# parser.add_argument('--hardlink', dest='hardlink',
#                     default=False, action="store_true",
#                     help='Create hard links instead of moving files.')
#
parser.add_argument('-f', '--french', dest='french', default=False,
                    action="store_true", required=False,
                    help='Switch output to french.')

parser.add_argument('-q', '--quick', dest='quick', default=False,
                    action="store_true", required=False,
                    help='Print quickly only the names of members, not their details.')

# Optional argument with parameter (--user USER).  By putting 'type=str', we
# tell the parser that the argument must take a parameter with it.
# parser.add_argument('-u', '--user', type=str, dest='user',
#                     default=os.environ["USER"], help='Provide user id.')

# Optional argument with choices.
# See:  https://stackoverflow.com/questions/40324356/python-argparse-choices-with-a-default-choice
# parser.add_argument('-t', '--type', dest='type', default="ascii7bits", required=False, type=str,
#                     nargs='?',
#                     choices=['ascii7bits', 'latin', 'digitAndLetters', 'digitAndLowerLetters', 'digitAndUpperLetters' ],
#                     help='Length of password generated.  Default is ascii7bits.')

parser.add_argument('-l', '--log-level', dest='loglevel', default='info',
       choices=['debug', 'info', 'warning', 'error', 'critical'],
       help='Set logs level.  Default is \'info\'.')

args = parser.parse_args()

if args.loglevel=="debug":
    level=logging.DEBUG
elif args.loglevel=="warning":
    level=logging.WARNING
elif args.loglevel=="error":
    level=logging.ERROR
elif args.loglevel=="critical":
    level=logging.CRITICAL
else:
    level=logging.INFO

if args.french:
    language = "fr"
else:
    language = "en"

# When setting the log level with logging.basicConfig(), the log level is set
# for ALL Python modules that using the logging facility, not just the code
# found in this script.  This is usually not desired.
#
# It is preferred to use a logger and set the log level only for it, so only
# its logs are showing, not that of other modules (very preferable when the
# log level is set to DEBUG).

# logging.debug("Test of logging %s", "here. :)")
logging.basicConfig(
    format='%(asctime)s - %(levelname)5s - %(funcName)20s(): %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S')

# Creating a logger with the script's name and setting it to a specific log
# level.
logger = logging.getLogger(scriptName)
logger.setLevel(level)
logger.debug("Test of logging %s", "here. :)")

errors=""

if len(args.groupNames) == 0:
    errors += "\n  You must provide at least one groupNames."

if len(errors) > 0:
    print("\x1B[1;37;41mERROR:\x1B[0m  The following errors where detected.\n" + errors + "\n\nCommand aborted.")
    sys.exit(1)


text =  {
           "en": {
                    "MembersOfGroups":    "Members of group",
                    "Empty":              "This group is empty",
                    "GroupDoesNotExist":  "Group does not exist"
                 },

           "fr": {
                    "MembersOfGroups":    "Membres du groupe",
                    "Empty":              "Ce groupe est vide",
                    "GroupDoesNotExist":  "Groupe n'existe pas"
                 }
        }


def runDsCommand(command, failOnError):
    commandAsHuman=" ".join(command)
    logger.debug("command = >>%s<<", commandAsHuman)
    completedProcess = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    if failOnError and completedProcess.returncode != 0 :
        logger.error("Failed command with exit code #%d:  %s", completedProcess.returncode, commandAsHuman)
        sys.exit(completedProcess.returncode)

    #output = completedProcess.stdout.decode('850')
    #output = completedProcess.stdout.decode('850').encode('utf-8').rstrip().strip('"')
    output = completedProcess.stdout.decode('850').rstrip().strip('"').replace('\r', '')
    logger.debug("output = >>%s<<", output)
    return (output, completedProcess.returncode)


extractCNfromOUre = re.compile(r".*?CN=(?P<cn>.*?),")
def extractCNfromOU(ou):
    return extractCNfromOUre.search(ou).group("cn")


def findPositionsOfFields(header):

    inString          = False
    positionsOfFields = []

    for index in range(0, len(header)):
        if header[index] != " " and inString == False:
            inString = True
            positionsOfFields.append(index)
        elif header[index] == " " and inString == True:
            inString = False

    logger.debug("positionsOfFields for >>%s<< are >>%s<<", header, positionsOfFields)
    return positionsOfFields


def showGroupUsers(groupName, indent):
    (groupOU, exitcode) = runDsCommand(["dsquery.exe", "group", "-name", groupName], True)
    if groupOU == "":
        msg=text[language]["GroupDoesNotExist"]
        print(f"\n{groupName} - {msg}.\n")
        return

    groupName = extractCNfromOU(groupOU)  # Fetch name of group with proper, official case.

    (groupMembers, exitcode) = runDsCommand(["dsget.exe", "group", "-members", groupOU], True)
    groupMembers = groupMembers.split("\n")
    groupMembers = [ x.strip('"') for x in groupMembers ]
    logger.debug("groupMembers = >>%s<<", groupMembers)


    if len(groupMembers) == 0:
        msg=text[language]["Empty"]
        print(f"\n{indent}{groupName} - {msg}:\n")
        return

    msg=text[language]["MembersOfGroups"]
    print(f"\n{indent}{groupName} - {msg}:\n")

    groupsToExpandInto = []
    for member in groupMembers:

        if args.quick:
            print(f"{indent}    {member}")
        else:
            (memberData, exitcode) = runDsCommand(["dsget.exe", "user", member, "-fn", "-ln", "-email"], False)
            if exitcode == 0 and memberData == "":
                # Nothing to show / print.
                pass
            elif exitcode == 0:
                #print(f"{indent}{memberData}")
                memberDataLines   = memberData.split('\n')
                header            = memberDataLines[0]
                positionsOfFields = findPositionsOfFields(header) + [ len(header) ]

                memberData = memberDataLines[1]
                firstName  = memberData[positionsOfFields[0]:positionsOfFields[1]].strip()
                lastName   = memberData[positionsOfFields[1]:positionsOfFields[2]].strip()
                email      = memberData[positionsOfFields[2]:positionsOfFields[3]].strip()
                to_print=f"{indent}    {firstName}"

                if firstName != lastName:
                    to_print=f"{to_print} {lastName}"
                if len(email) > 0:
                    to_print=f"{to_print} ({email})"

                print(to_print)
            elif exitcode == 87:
                groupsToExpandInto.append(extractCNfromOU(member))
            else:
                logger.error("Failure with exit code #%d:  %s", exitcode, memberData)

    for group in groupsToExpandInto:
        showGroupUsers(group, indent+"    ")

firstTime = True
for groupName in args.groupNames:

    if not firstTime:
        print("\n\n")

    showGroupUsers(groupName, "")
    firstTime = False

print()
