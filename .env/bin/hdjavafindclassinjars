#!/bin/bash

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2021 Hans Deragon - GPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.
#
# It is released under the GPL 3 licence which can be found at:
#
#     https://www.gnu.org/licenses/gpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

SCRIPT_NAME="${BASH_SOURCE[0]/*\/}" # Basename, efficient form.

usage()
{
  cat <<EOM
Usage:  ${SCRIPT_NAME} [-h] <*.jar file>+

  -h  Display this help text.
EOM
}

# ARGUMENT PARSING
# ════════════════════════════════════════════════════════════════════

OPTIND=1 # Normally not required, except if the script is sourced.
         # Better be safe than sorry.
while getopts "h" OPTCMD; do
  case "${OPTCMD}" in
    "h"|*)  usage; exit 1;;
  esac
done

shift $((${OPTIND} - 1))  # Remove options from $@
IFS=$(echo -en "\n\b")    # Set IFS so if FILES in $@ have spaces,
                          # we separate FILES properly.

FILES=("$@") # If you want the number of elements of $@, use $#

# COMMANDLINE VALIDATION
# ════════════════════════════════════════════════════════════════════

ERRORS=""

if ((${#FILES[*]} == 0)); then
  ERRORS="${ERRORS} - You must provide at least one jar file to scan.\n"
fi

if [ ! -z "${ERRORS}" ]; then
  echo -e "ERROR:  The following errors where detected.\n"
  echo -e "${ERRORS}"
  echo -e "Command aborted.\n"
  usage
  exit 1
fi

# PROCESSING
# ════════════════════════════════════════════════════════════════════

# This function is used to print a line over an already existing
# line.  This is to show quickly, on the same line, activity
# such as a script that searches through many files.  The filenames
# can then be shown quickly on the same line as the files are being
# scanned one after the other one.

TERM_COLS_NB=$(tput cols)

printLineWithSpacesToEnd()
{
  printf "%- ${TERM_COLS_NB}s\r" "${1}"
}

for FILE in $(find . -name '*.jar' -type f); do
  printLineWithSpacesToEnd "Searching in ${FILE}"
  OUTPUT=$(unzip -l "${FILE}" | egrep --extended-regexp $@)
  if [ ! -z "${OUTPUT}" ]; then
    printLineWithSpacesToEnd "Found in ${FILE}"
    echo -e "\n\n${OUTPUT}\n"
  fi
done

printLineWithSpacesToEnd "" # Clean last line.
