#!/usr/bin/env python3

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2024 Hans Deragon - AGPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
# released under the GNU Affero General public Picense which can be found at:
#
#     https://www.gnu.org/licenses/agpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

import os
import sys
import shutil
import subprocess
import platform


def flatpak_exists(flatpak_id):
    try:
        completedProcess = subprocess.run([ "flatpak", "info", flatpak_id ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if completedProcess.returncode == 0:
            return flatpak_id
        else:
            return None
    except FileNotFoundError:
        # Command 'flatpak' is not installed on the system.
        return None

def flatpak_vim_exists():
    return flatpak_exists("org.vim.Vim")

def flatpak_nvim_exists():
    return flatpak_exists("???") # TODO

description="""
This script is used to call gvim, if available, or vim otherwise.  Under
Windows, the proper gvim.exe will be called with any file passed as an
argument converted to Windows format so gvim.exe can find it.
"""

vimType = "vim"

nominalArgs  = []
terminal_cmd = []
graphical = False

if "--hdgvim" in sys.argv:
    sys.argv.remove("--hdgvim")
    vimType = "vim"
    graphical = True
if "--hdgnvim" in sys.argv:
    sys.argv.remove("--hdgnvim")
    vimType = "nvim"
    graphical = True
if "--hdnvim" in sys.argv:
    sys.argv.remove("--hdnvim")
    vimType = "nvim"
if "--hdvim" in sys.argv:
    sys.argv.remove("--hdvim")
    vimType = "vim"
if "--hddiff" in sys.argv:
    sys.argv.remove("--hddiff")
    nominalArgs += ["-d"]

fork=True
if "--nofork" in sys.argv:
    sys.argv.remove("--nofork")
    fork=False

try:
    gvim_from_env = [ os.environ['HD_GVIM'] ]
except:
    # OS environment variable HD_GVIM is not set, thus we set it to None so
    # the test for this non-existent binary will not be executed.
    gvim_from_env = []

executables_to_try = []
vimArgs = []
debug_cmds = []
hdvimrc     = os.environ['HDVIMRC']
hdvimrcpost = os.environ['HDVIMRC'] + "-post"

if "nvim" in vimType:  # Neovim / NVIM
    executables_to_try = [ "nvim" ]
    #debug_cmds = [ "unshare", "--net", "--map-root-user" ]  # Block any network access to nvim.
    if graphical:

        # A good graphical nvim does not really exist as of 2024-07-01.  Thus we
        # emulate a graphical nvim by starting a fresh terminal and running nvim
        # within it.

        # terminal_cmd = [ "terminator", "--maximize", "--icon", "/usr/share/icons/hicolor/48x48/apps/gvim.png", "-x" ]  # -x:  Run the rest of the command line.
        terminal_cmd = [ "gnome-terminal", "--maximize", "--" ]

    if os.path.isfile(hdvimrc) and os.access(hdvimrc, os.R_OK):
        vimArgs  += [ "-u", hdvimrc]
else:  # Regular Vim/gVim
    if os.path.isfile(hdvimrc) and os.access(hdvimrc, os.R_OK):
        vimArgs  += [ "-u", hdvimrc]
    if os.path.isfile(hdvimrcpost) and os.access(hdvimrcpost, os.R_OK):
        vimArgs  += [ "-S", hdvimrcpost]

    if graphical:
        nominalArgs += [ "-g" ]

    # Comment by Hans Deragon (hans@deragon.biz), 2024-09-29 09:26:44 EDT
    #
    # The Flatpak version of Vim (id 'org.vim.Vim') has no access ton any of
    # the /usr/bin/pinentry programs, and thus cannot decrypt '.gpg' files.
    # Thus if any of the files provided are gpg encrypted, we do not use the
    # Flatpak version of Vim.
    #
    # I tried to give access to Vim's Flatpak, but to no vail.  The Flatpak
    # does not come with its own pinentry and one cannot provide access to the
    # host's /usr directory to a Flatpak.  When attempting this, we get the
    # error:
    #
    #   F: Not sharing "/usr/bin/pinentry-gnome3" with sandbox: Path "/usr" is reserved by Flatpak
    #   F: Not sharing "/usr/bin/pinentry-curses" with sandbox: Path "/usr" is reserved by Flatpak
    if not any(".gpg" in string for string in sys.argv):
        flatpak_id = flatpak_vim_exists()

        if flatpak_id:
            executables_to_try = [ flatpak_id ]

    executables_to_try = gvim_from_env + executables_to_try + [ "vim", "vim.exe" ]

executable = None
for binary in executables_to_try :
    executable = shutil.which(binary)
    if executable is not None:
        break

if executable is None:
    print("ERROR:  Could not find [n]vim executable.  Aborting")
    sys.exit(1)

nominalArgs += sys.argv[1:]

if "cygwin" in platform.system().lower() and "gvim" in executable.lower():
    # Windows Gvim being used here.

    # ${HDVIM} is in Cygwin path format, but gvim.exe is not a Cygwin
    # binary and requires a Windows format path.  Thus, we are converting
    # it here.  Remember, ${HDVIM} is used in .vimrc!
    completedProcess = subprocess.run(
            ["cygpath", "-w", os.environ['HDVIM']],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    os.environ['HDVIM']=completedProcess.stdout.decode('utf-8').rstrip()

    # When ${TZ} is set to "America/Toronto", the 'strftime' function of
    # gVim will return the wrong "ric" timezone.  So we hardcode ${TZ}
    # here to EDT assuming we are always in EDT and the problem is solved.
    os.environ['TZ']="EDT"

    # Test each argument passed to the command to see if it is a file.  If
    # it is, convert the path format from Cygwin format to Windows format.
    tmpArgs = []
    for arg in nominalArgs:
        if arg[0] != '-' and os.path.isfile(arg):
            completedProcess = subprocess.run(
                    ["cygpath", "-w", arg],
                    stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            tmpArgs.append(completedProcess.stdout.decode("utf-8").rstrip())
        else:
            tmpArgs.append(arg)
    nominalArgs = tmpArgs

#print("nominalArgs:  " + str(nominalArgs))
#print("argv:  " + str(argv))
cmd = terminal_cmd + debug_cmds + [ executable ] + vimArgs + nominalArgs
# print("cmd:  " + str(cmd))
# print("cmd:  " + str(" ".join(cmd)))

try:
    display = os.environ['DISPLAY']
    if display == "":
        display = None
except:
    display = None

if graphical and display != None and fork == True:

    # Forking here to allow user to go back to the terminal prompt quickly.
    # Sometimes, gvim takes time to start, for instance when the DISPLAY
    # environment variable is not properly set and gvim waits long before
    # timing out and returning to the prompt.
    if os.fork() != 0:
        # Parent process must die, to un-hook the terminal.
        sys.exit(0)

# See:  https://docs.python.org/3/library/os.html#process-management
os.execvp(cmd[0], cmd)
