#!/usr/bin/env python3

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2024 Hans Deragon - AGPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
# released under the GNU Affero General public Picense which can be found at:
#
#     https://www.gnu.org/licenses/agpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

import os.path
import sys
import logging
import random

from datetime import datetime

import argparse
from argparse import RawTextHelpFormatter

scriptPath=os.path.dirname(sys.argv[0])
scriptName=os.path.basename(sys.argv[0])

logger = logging.getLogger(scriptName)

scriptPathAbs=os.path.realpath(scriptPath)
scriptPathAbsParent=os.path.dirname(scriptPathAbs)

scriptNameAndPathAbs=scriptPathAbs + os.sep + scriptName

try:
  scriptNameBase=scriptName.rsplit('.', 1)[0] # Extension found.
except IndexError:
  scriptNameBase=scriptName # There is no extension.



# PARSING ARGUMENTS
# ────────────────────────────────────────────────────────────────────────────
#
# See:  http://docs.python.org/2/library/argparse.html
#
# WARNING:
#
# - and -- options are always optional according to argparse.  If you
# want mandatory arguments, they should not be prefixed with - or --.
#
# http://stackoverflow.com/questions/24180527/argparse-required-arguments-listed-under-optional-arguments

parser = argparse.ArgumentParser(description="""
\x1B[1;37;42m SAFE \x1B[0m

Generates a password based on a preselected set of acceptable caracters.

""", formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument('-l', '--length', dest='length', default=0, required=False, type=int,
                    help='Length of password generated.  Default is to generate 16 and 32 characters.')

parser.add_argument('-t', '--type', dest='type', default="all", required=False, type=str,
                    nargs='?',
                    choices=['all', 'ascii7bits', 'latin', 'digitAndLetters', 'digitAndLowerLetters', 'digitAndUpperLetters' ],
                    help='Length of password generated.  Default is "all".')

parser.add_argument('--log-level', dest='loglevel', default='info',
       choices=['debug', 'info', 'warning', 'error', 'critical'],
       help='Set logs level.  Default is \'info\'.')

args = parser.parse_args()

if args.loglevel=="debug":
    level=logging.DEBUG
elif args.loglevel=="warning":
    level=logging.WARNING
elif args.loglevel=="error":
    level=logging.ERROR
elif args.loglevel=="critical":
    level=logging.CRITICAL
else:
    level=logging.INFO

logging.basicConfig(
    format='%(asctime)s - %(levelname)5s - %(funcName)20s(): %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S')

# Creating a logger with the script's name and setting it to a specific log
# level.
logger = logging.getLogger(scriptName)
logger.setLevel(level)

errors=""

if len(errors) > 0:
  print("\x1B[1;37;41mERROR:\x1B[0m  The following errors where detected.\n" + errors + "\n\nCommand aborted.")
  sys.exit(1)

# From https://stackoverflow.com/questions/1477294/generate-random-utf-8-string-in-python
def generatePassword(length, rangeType):

    caracterset = [
        get_char(code_point) for current_range in ranges[rangeType]
            for code_point in range(current_range[0], current_range[1] + 1)
    ]

    logger.debug("caracterset=%s", str(caracterset))
    password = ''.join(random.choice(caracterset) for i in range(length))
    print(f" {length:2} / {rangeType:24} →     {password}")


try:
    get_char = unichr
except NameError:
    get_char = chr


ranges = {

  "ascii7bits":  [
        ( 0x0021, 0x007E )
    ],

  "digitAndLetters":  [
        ( 0x0030, 0x0039 ), # Digits
        ( 0x0041, 0x005A ), # A-Z
        ( 0x0061, 0x007A )  # a-z
    ],

  "digitAndLowerLetters":  [
        ( 0x0030, 0x0039 ), # Digits
        ( 0x0061, 0x007A )  # a-z
    ],

  "digitAndUpperLetters":  [
        ( 0x0030, 0x0039 ), # Digits
        ( 0x0041, 0x005A )  # A-Z
    ],

  "latin":  [
        ( 0x0021, 0x0021 ),
        ( 0x0023, 0x0026 ),
        ( 0x0028, 0x007E ),
        ( 0x00A1, 0x00AC ),
        ( 0x00AE, 0x00FF ),
        ( 0x0100, 0x017F ),
        ( 0x0180, 0x024F ),
        ( 0x2C60, 0x2C7F ),
        ( 0x16A0, 0x16F0 ),
        ( 0x0370, 0x0377 ),
        ( 0x037A, 0x037E ),
        ( 0x0384, 0x038A ),
        ( 0x038C, 0x038C )
    ]
}

# Set the ranges to print.
if args.type == "all":
    rangesToExecute = ranges.keys()
else:
    rangesToExecute = [ args.type ]

# If not lenght is provide (0), then we print out password of lengths 16 and 32.
if args.length == 0:
    lengthList = [ 16, 32 ]
else:
    lengthList = [ args.length ]

# Generating the passwords now.
for length in lengthList:
    for rangeToExecute in rangesToExecute:
        generatePassword(length, rangeToExecute)
