#!/bin/bash

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2024 Hans Deragon - AGPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
# released under the GNU Affero General public Picense which can be found at:
#
#     https://www.gnu.org/licenses/agpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

SCRIPT_NAME="${BASH_SOURCE[0]/*\/}" # Basename, efficient form.
SCRIPT_PATH_ABS="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" # Fetch real directory, not symlink.  Spaces are well handled.
# SCRIPT_PATH_ABS="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" # Fetch real directory, not symlink.  Spaces are well handled.

SCRIPT_NAME_BASE="${SCRIPT_NAME/.sh}"
SCRIPT_NAMEANDPATH_ABS="${SCRIPT_PATH_ABS}/${SCRIPT_NAME}"
SCRIPT_PATH_ABS_PARENT=$(dirname "${SCRIPT_PATH_ABS}")

usage()
{
  echo -e "
\e[1;30;43m SLIGHT DANGER \e[0m

Create the AWS Cloudformation stack which template filename is passed
as an argument to this script.

Usage:  ${SCRIPT_NAME} [-c|-u|-x|-z]
          [-p <parameter file.json>]
          [-n <stack name>]
          [-s <stack suffix>]
          [-d|-e] [-h] <template filename>+

  -c  Create stack
  -u  Update stack
  -x  Create changeset
  -z  Delete stack

  -p  <parameter file.json> - Note that lines can be commented with '#'.
  -n  Stack name passed as argument, instead of being derived from the filename.
  -s  Suffix to add to stack name.  Default is none.

  -d  Dry-run.
  -e  Execute command.  Default is dry-run.
  -h  Display this help text.
"
}

run()
{
  if (( DRYRUN )); then
    echo "DRYRUN:  $@" 1>&2
    OUTPUT=""
  else
    echo "EXECUTING:  $@" 1>&2
    OUTPUT="$(eval $@ 2>&1)"
  fi
}



# ARGUMENT PARSING
# ════════════════════════════════════════════════════════════════════

PARAMETERS=""
DRYRUN=1
OPERATION="create-stack"
STACK_SUFFIX=""
unset STACK_NAME

OPTIND=1 # Normally not required, except if the script is sourced.
         # Better be safe than sorry.
while getopts "xcuzp:n:s:deh" OPTCMD; do
  case "${OPTCMD}" in
    "x")    OPERATION="create-change-set";;
    "c")    OPERATION="create-stack";;
    "u")    OPERATION="update-stack";;
    "z")    OPERATION="delete-stack";;
    "p")    PARAMETERS="${OPTARG}";;
    "n")    STACK_NAME="${OPTARG}";;
    "s")    STACK_SUFFIX="${OPTARG}";;
    "d")    DRYRUN=1;;  # Run in dry-run mode.
    "e")    DRYRUN=0;;  # Run in execute mode.
    "h"|*)  usage; exit 1;;
  esac
done

shift $((${OPTIND} - 1))  # Remove options from $@
IFS=$(echo -en "\n\b")    # Set IFS so if FILES in $@ have spaces,
                          # we separate FILES properly.

FILES=("$@") # If you want the number of elements of $@, use $#



# VALIDATION
# ════════════════════════════════════════════════════════════════════

printErrorsAndExitIfAny()
{
  printWarnings
  if [ ! -z "${ERRORS}" ]; then
    echo -e "${ANSI[FG_WHITE_BG_RED]}ERROR:${ANSI[RESET]}  The following errors where detected.\n"
    echo -e "${ANSI[FG_WHITE_BG_RED]}ERREUR:${ANSI[RESET]}  Les erreurs suivantes furent détectées.\n"
    echo -e "${ERRORS}"
    echo -e "Command aborted."
    echo -e "Commande avortée."
    exit 1
  fi
}

printWarnings()
{
  if [ ! -z "${WARNINGS}" ]; then
    echo -e "${ANSI[FG_BLACK_BG_YELLOW]}WARNING:${ANSI[RESET]}  The following warnings were thrown.\n"
    echo -e "${ANSI[FG_BLACK_BG_YELLOW]}AVERTISSEMENT:${ANSI[RESET]}  Les avertissement suivants furent lancés.\n"
    echo -e "${WARNINGS}"
  fi
}

WARNINGS=""
ERRORS=""

if ((${#FILES[*]} == 0)); then
  ERRORS="${ERRORS} - You must provide at least one file.\n"
fi

if [ ! -z "${PARAMETERS}" ]; then
  if [ -e  "${PARAMETERS}" ]; then
    PARAMETERS="--parameters '$(cat "${PARAMETERS}" | egrep -vE "^\s*#" | envsubst | tr -d '\r')'"
  else
    ERRORS="${ERRORS} - Parameters file does not exists:  ${PARAMETERS}\n"
  fi
fi

printErrorsAndExitIfAny

TIMESTAMP_FORMAT_HUMAN="%Y-%m-%d %H:%M:%S"


# title()
# ────────────────────────────────────────────────────────────────────────────
#
#  call:  title "Test #1"
#  stdout:  ═ Test #1 2020-02-21 11:22:51 ════════════════════════════════════════════════════
title()
{
  local LINE="═══════════════════════════════════════════════════════════════════════════════"
  local TITLE="${1} "$(date "+${TIMESTAMP_FORMAT_HUMAN}")
  local SEPARATOR=$(printf "%s %s %s\n" "${LINE:1:1}" "${TITLE}" "${LINE:${#TITLE}}")
  echo "${SEPARATOR}"
}


# PROCESSING
# ════════════════════════════════════════════════════════════════════

OPERATION_ORG="${OPERATION}"

# Running through remaining arguments
for FILE in ${FILES[@]}; do

  title "Processing ${FILE}"
  FILE_BASENAME="${FILE/*\/}" # Basename, efficient form.

  EXTENSION="${FILE##*.}"
  if [ "${EXTENSION}" == ${FILE} ]; then
    # No extension found.
    EXTENSION=""

    [ -z "${STACK_NAME}" ] && STACK_NAME="${FILE_BASENAME}"
  else
    # An extension was found.  Stripping it from ${FILE}.
    [ -z "${STACK_NAME}" ] && STACK_NAME="${FILE_BASENAME%.*}"
  fi

  EXTRA_OPTIONS=""

  OPERATION="${OPERATION_ORG}"  # Reset operation to original operation for each file.
  unset OUTPUT  # Reset

  while ((1)); do

    if [[ "${OPERATION}" == *"delete"* ]]; then
      echo -ne "\n\e[1;30;43m  WARNING  \e[0m  Delete stack '${STACK_NAME}'? (y/n) "
      read -s -n 1 ANSWER
      if [[ "${ANSWER}" == "y" ]]; then
        echo -e "\e[1;30;41m  Deleting.  \e[0m"
      else
        echo -e "\e[1;30;42m  Skipping.  \e[0m"
        continue  # In all case, either we skip or the operation was executed.
      fi
    else
      if [ "${OPERATION}" = "create-change-set" ]; then
        TIMESTAMP_FILE="$(date +"%Y%m%dT%H%M%S")" # ISO 8601 format.
        EXTRA_OPTIONS="${EXTRA_OPTIONS} --change-set-name \"${STACK_NAME}-${TIMESTAMP_FILE}\""
      fi

      EXTRA_OPTIONS="${EXTRA_OPTIONS} --capabilities \"CAPABILITY_NAMED_IAM\" --template-body \"file://./${FILE}\""
    fi

    EXTRA_OPTIONS="${EXTRA_OPTIONS} ${PARAMETERS}"

    shopt -s extglob                        # Important:  This option must be set for trimming to work.
    EXTRA_OPTIONS="${EXTRA_OPTIONS##*( )}"  # Trim all spaces (' ') from the left.
    run aws cloudformation "${OPERATION}" \
      --stack-name "${STACK_NAME}${STACK_SUFFIX}" \
      ${EXTRA_OPTIONS} 2>&1

    # ${OUTPUT} is set in the run() function.
    if [[ "${OUTPUT}" == *"error occurred"*"already exists"* && \
          "${OPERATION}" == "create-stack" ]]; then
      echo "Updating stack instead of creating it as ask, since the stack already exists."
      OPERATION="update-stack"
      continue
    else
      if [[ "${OUTPUT}" == *"No updates are to be performed"* ]]; then
        echo "No updates are to be performed."  # Removing misleading "Error" message.
        break
      else
        echo "${OUTPUT}"
      fi
      break
    fi

  done

  if (( "${#FILES[*]}" > 1 )); then
    if [[ "${OUTPUT}" != *"No updates are to be performed"* ]]; then
      PAUSE=30
      echo "Pausing ${PAUSE}s between stack operations."
      sleep "${PAUSE}"
    fi
  fi
done

echo "Finished at:  $(date "+${TIMESTAMP_FORMAT_HUMAN}")"
