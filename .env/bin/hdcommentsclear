#!/bin/bash

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2024 Hans Deragon - AGPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
# released under the GNU Affero General public Picense which can be found at:
#
#     https://www.gnu.org/licenses/agpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

SCRIPT_NAME="${BASH_SOURCE[0]/*\/}" # Basename, efficient form.

usage()
{
  echo -e "
\e[1;37;42m SAFE \e[0m

Remove comments in provided files or <STDIN>.

Usage:  ${SCRIPT_NAME} [-h] <file.xml>+

  -f  Ignore any prefix that suggest to be a file followed by a colon, as
      reported by the output of grep.

      For instance, consider what is returned by the following command:

        $ fgrep -r bash .
        bin/hd-env-bashrc-install:# On RHEL systems..
        bin/hd-env-bashrc-install:if fgrep -q '.bashrc' \"\\\${HOME}/.bash_profile\"; then
        bin/hd-env-bashrc-install:  BASH_FILE=\"\\\${HOME}/.bash_profile\"

      Now notice that when passed through '${SCRIPT_NAME} -f', the line with
      the comments does not show because the it is commented, even though the
      actual line in <STDIN> does not start with a comment, but with a
      filename, i.e. 'bin/hd-env-bashrc-install:'.

        $ fgrep -r bash . | ${SCRIPT_NAME} -f
        bin/hd-env-bashrc-install:if fgrep -q '.bashrc' \"\\\${HOME}/.bash_profile\"; then
        bin/hd-env-bashrc-install:  BASH_FILE=\"\\\${HOME}/.bash_profile\"

      This option is ignored when input is XML.

  -x  Force file type as XML (for use with <STDIN>)
  -h  Display this help text.
"
}



# ARGUMENT PARSING
# ════════════════════════════════════════════════════════════════════

OPTIND=1 # Normally not required, except if the script is sourced.
         # Better be safe than sorry.
unset FILETYPE
RE_PREFIX='\s*'
while getopts "fxh" OPTCMD; do
  case "${OPTCMD}" in
    "f")    RE_PREFIX='\s*([[:alnum:]]| |_|-|\.|\/)*:\s*';;
    "x")    FILETYPE="xml";;
    "h"|*)  usage; exit 1;;
  esac
done

shift $((${OPTIND} - 1))  # Remove options from $@
IFS=$(echo -en "\n\b")    # Set IFS so if FILES in $@ have spaces,
                          # we separate FILES properly.

FILES=("$@") # If you want the number of elements of $@, use $#



# VALIDATION
# ════════════════════════════════════════════════════════════════════

ERRORS=""

# if ((${#FILES[*]} == 0)); then
#   ERRORS="${ERRORS} - You must provide at least one argument.\n"
# fi

if [ ! -z "${ERRORS}" ]; then
  echo -e "\e[1;37;41mERROR:\e[0m  The following errors where detected.\n"
  echo -e "${ERRORS}"
  echo -e "Command aborted."
  exit 1
fi



# title()
# ────────────────────────────────────────────────────────────────────────────
#
#  call:  title "Test #1"
#  stdout:  ═ Test #1 2020-02-21 11:22:51 ════════════════════════════════════════════════════
title()
{
  local LINE="═══════════════════════════════════════════════════════════════════════════════"
  local TITLE="${1} "$(date "+${TIMESTAMP_FORMAT_HUMAN}")
  local SEPARATOR=$(printf "%s %s %s\n" "${LINE:1:1}" "${TITLE}" "${LINE:${#TITLE}}")
  echo "${SEPARATOR}"
}



# PROCESSING
# ════════════════════════════════════════════════════════════════════

# STDIN OR FILES
#
# If no file has been provided, set one file as STDIN (-).  This way,
# either files passed as arguments are processed or STDIN.
if (( ${#FILES[*]} == 0 )); then
  echo -e "\e[1;30;43m WARNING \e[0m  SDTIN being used for input." >&2
  FILES[0]="<STDIN>"
fi

for FILE in ${FILES[@]}; do

  # Print title only if more than one file is being processed.
  (( ${#FILES[*]} > 1 )) && title "Processing ${FILE}"

  EXTENSION="${FILE##*.}"
  if [ "${EXTENSION}" == "${FILE}" ]; then
    # No extension found.
    EXTENSION=""
    FILENAME="${FILE}"
  else
    # An extension was found.  Stripping it from ${FILE}.
    FILENAME="${FILE%.*}"
  fi

  if [[ "${FILE}" == "<STDIN>" ]]; then
    FILE="-"
  else
    [[ -z "${FILE_TYPE}" ]] && FILE_TYPE="$(file "${FILE}")"
  fi

  # 'file' cannot detect YAML files.  It only returns
  # 'Unicode text, UTF-8 text'.  Thus, we use the file's
  # extension to determine if the file is a YAML file.
  if [[ "${EXTENSION,,}" =~ "yml" || "${EXTENSION,,}" =~ "yaml" ]]; then
    sed --regexp-extended "/^${RE_PREFIX}"'(#|$)/d' "${FILE}"
  elif [[ "${FILE_TYPE,,}" =~ "xml" ]]; then
    xmlstarlet ed -d '//comment()' "${FILE}"
  else
    # -- Comments are for SQL.
    sed --regexp-extended "/^${RE_PREFIX}"'(;|#|\/\/|\"|--|$)/d' "${FILE}"
  fi
done
