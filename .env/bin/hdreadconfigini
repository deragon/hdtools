#!/usr/bin/env python3

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2024 Hans Deragon - AGPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
# released under the GNU Affero General public Picense which can be found at:
#
#     https://www.gnu.org/licenses/agpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

import os.path
import sys

# os.path.realpath(os.curdir) # Current directory, canonical form.

scriptPath=os.path.dirname(sys.argv[0])
scriptName=os.path.basename(sys.argv[0])

scriptPathAbs=os.path.realpath(scriptPath)
scriptPathAbsParent=os.path.dirname(scriptPathAbs)

scriptNameAndPathAbs=scriptPathAbs + os.sep + scriptName

try:
  scriptNameBase=scriptName.rsplit('.', 1)[0] # Extension found.
except IndexError:
  scriptNameBase=scriptName # There is no extension.

# PARSING ARGUMENTS
# ────────────────────────────────────────────────────────────────────────────
#
# See:  http://docs.python.org/2/library/argparse.html
#
# WARNING:
#
# - and -- options are always optional according to argparse.  If you
# want mandatory arguments, they should not be prefixed with - or --.
#
# http://stackoverflow.com/questions/24180527/argparse-required-arguments-listed-under-optional-arguments

import argparse
from argparse import RawTextHelpFormatter

parser = argparse.ArgumentParser(description="""
Read a .ini file and export its full content in variables that Bash can make use of.

For example, given config.ini:

    [Environment]
      type                = DEV
      name                = D01

Then run:

    eval $(""" + scriptNameBase + """ config.ini --export)
    echo ${Environment_type}
    DEV

""", formatter_class=RawTextHelpFormatter)

parser.add_argument('file', metavar='<configfile>', type=str, nargs='+',
                    help='List of config files to read and convert into Bash variables.')
parser.add_argument('-e', '--export', dest='export',
                    default=False, action="store_true",
                    help='Set "export " string before variable definition, to export them.')

args = parser.parse_args()



# PROCESSING
# ────────────────────────────────────────────────────────────────────────────

import os.path
from configparser import SafeConfigParser

if args.export:
    export_str="export "
else:
    export_str=""

config = SafeConfigParser()
for file in args.file:
    config.read(file)

    for section in config.sections():
        for (key, val) in config.items(section):
            print(export_str + section + "_" + key + "=\"" + val + "\"")
