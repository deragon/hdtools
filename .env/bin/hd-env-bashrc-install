#!/bin/bash

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2024 Hans Deragon - AGPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
# released under the GNU Affero General public Picense which can be found at:
#
#     https://www.gnu.org/licenses/agpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

SCRIPT_NAME="${BASH_SOURCE[0]/*\/}" # Basename, efficient form.
SCRIPT_PATH_ABS="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" # Fetch real directory, not symlink.  Spaces are well handled.
# SCRIPT_PATH_ABS="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" # Fetch real directory, not symlink.  Spaces are well handled.

SCRIPT_NAME_BASE="${SCRIPT_NAME/.sh}"
SCRIPT_NAMEANDPATH_ABS="${SCRIPT_PATH_ABS}/${SCRIPT_NAME}"
SCRIPT_PATH_ABS_PARENT=$(dirname "${SCRIPT_PATH_ABS}")

usage()
{
  echo -e "
\e[1;37;42m SAFE \e[0m
Install on remote host an alias in .bashrc to initiate the loading
of Hans Deragon's environment.

Usage:  ${SCRIPT_NAME} [-d] [-e] [-z] [-n <nom>] [-h] <DST>+

  -d  Dry-run.
  -f  Full copy of the environment, with no exclusions.
  -h  Display this help text.
"
}

run()
{
  if (( DRYRUN )); then
    echo "DRYRUN:  $@"
  else
    "$@"
  fi
}

# To avoid heredoc expanding variables, add around the variabe single quotes
# (').
#
# See: https://stackoverflow.com/questions/27920806/how-to-avoid-heredoc-expanding-variables
#read -r -d '' SCRIPT << 'EOS' >"/tmp/${SCRIPT_NAME}"
REMOTE_SCRIPT_PATH="/tmp/${SCRIPT_NAME}"
cat << 'EOS' >"${REMOTE_SCRIPT_PATH}"
#!/bin/bash

if [[ ! -z "${1}" ]]; then
  USER_HOME="${1}"
else
  USER_HOME="${HOME}"
fi

# On RHEL systems, .bash_profile sources .bashrc and then hard code
# the PATH variable, destroying the PATH setup by 'gohd'.
# To avoid this, we thus
if grep --fixed-strings --quiet '.bashrc' "${HOME}/.bash_profile"; then
  BASH_FILE="${HOME}/.bash_profile"
else
  BASH_FILE="${HOME}/.bashrc"
fi


BASH_COMMANDS="
# ----------------------------------------------------------------------
# Alias pour charger l'environnement de Hans Deragon.  N'affecte en rien
# l'environnement s'il n'est pas appelé.
alias gohd='source "${USER_HOME}/.hans.deragon/.corp-"*"/gohd"'
if [[ \"\${XMODIFIERS}\" == 'HDCONNECTION' ]] || \\
   [[ \"\$(dig +noall +short -x \${SSH_CLIENT/ *})\" == *'<SRC_COMPUTER>'* ]]; then
  gohd
fi
"

if grep --fixed-strings --quiet 'alias gohd' "${BASH_FILE}"; then
  printf "\e[1;34m% 8s:  Hans Deragon's 'gohd' already installed.\e[0;00m\n" "${USER}"
else
  echo -en "${BASH_COMMANDS}" >>"${BASH_FILE}"
  printf "\e[1;32m% 8s:  Hans Deragon's 'gohd' installed.\e[0;00m\n" "${USER}"
fi

if [ "$(whoami)" == "ec2-user" ]; then
  # On a AWS EC2 machine, ec2-user has sudo rights, thus we also
  # install the bootstrap on root's .bash(_profile|rc) file.
  sudo -u root bash "${0}" "${USER_HOME}"
fi

# Erase this script, but only once, thus only when it is not
# recursively called to configure the root account.
[ "$(whoami)" != "root" ] && rm "${0}"
EOS

# Because of the heredoc expansion was suppressed above, no use of variable or
# call to another processor was possible. Thus below, <SRC_COMPUTER> is
# substituted for the hostname from which this script is executing.
sed -ir "s/<SRC_COMPUTER>/$(hostname)/g" "${REMOTE_SCRIPT_PATH}"


# ARGUMENT PARSING
# ════════════════════════════════════════════════════════════════════

DRYRUN=0
FULL=0

OPTIND=1 # Normally not required, except if the script is sourced.
         # Better be safe than sorry.
while getopts "dfh" OPTCMD; do
  case "${OPTCMD}" in
    "d")    DRYRUN=1;;  # Run in dry-run mode.
    "f")    FULL=1;;    # Copy over everything.
    "h"|*)  usage; exit 1;;
  esac
done

shift $((${OPTIND} - 1))  # Remove options from $@
IFS=$(echo -en "\n\b")    # Set IFS so if DSTS in $@ have spaces,
                          # we separate DSTS properly.

DSTS=("$@") # If you want the number of elements of $@, use $#



# VALIDATION
# ════════════════════════════════════════════════════════════════════

ERRORS=""

if ((${#DSTS[*]} == 0)); then
  ERRORS="${ERRORS} - You must provide at least one hostname as a destination.\n"
fi

if [ ! -z "${ERRORS}" ]; then
  echo -e "\e[1;37;41mERROR:\e[0m  The following errors where detected.\n"
  echo -e "${ERRORS}"
  echo -e "Command aborted."
  exit 1
fi


# title()
# ────────────────────────────────────────────────────────────────────────────
#
#  call:  title "Test #1"
#  stdout:  ═ Test #1 2020-02-21 11:22:51 ════════════════════════════════════════════════════
title()
{
  local LINE="═══════════════════════════════════════════════════════════════════════════════"
  local TITLE="${1} "$(date "+${TIMESTAMP_FORMAT_HUMAN}")
  local SEPARATOR=$(printf "%s %s %s\n" "${LINE:1:1}" "${TITLE}" "${LINE:${#TITLE}}")
  echo "${SEPARATOR}"
}


# PROCESSING
# ════════════════════════════════════════════════════════════════════

# STDIN OR DSTS
#
# If no DST has been provided, set one DST as STDIN (-).  This way,
# either DSTs passed as arguments are processed or STDIN.
if (( ${#DSTS[*]} == 0 )); then
  echo -e "\e[1;30;43m WARNING \e[0m  SDTIN being used for input."
  DSTS[0]="-"
fi


# Running through remaining arguments
index=0
for DST in ${DSTS[@]}; do

  # Print title only if more than one DST is being processed.
  (( ${#DSTS[*]} > 1 )) && title "Processing ${DST}"
  scp -p "${REMOTE_SCRIPT_PATH}" "${DST}:${REMOTE_SCRIPT_PATH}"
  #echo -e "${SCRIPT}" >/tmp/a
  #echo -e "${SCRIPT}" >/tmp/a
  echo -e "${SCRIPT}" | /usr/bin/ssh "${DST}"
  /usr/bin/ssh "${DST}" bash "${REMOTE_SCRIPT_PATH}"

  (( FULL )) && HD_ENV_TRANSFER_OPTIONS='-f'
  hd-env-transfer ${HD_ENV_TRANSFER_OPTIONS} "${DST}"
done


# DRY RUN / EXECUTION WARNING
# ════════════════════════════════════════════════════════════════════
echo
if (( DRYRUN )); then
  echo -en "\e[1;37;44mCommand was executed in dry mode; nothing was executed.\e[0;00m\n\e[1;37;44mRerun with -e to execute the action.\e[0;00m\n"
else
  echo -en "\e[1;37;42mCommand was executed.\e[0;00m\n"
fi
