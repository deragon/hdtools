#!/bin/bash

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2025 Hans Deragon - AGPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
# released under the GNU Affero General Public License which can be found at:
#
#     https://www.gnu.org/licenses/agpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

SCRIPT_NAME="${BASH_SOURCE[0]/*\/}" # Basename, efficient form.
SCRIPT_PATH_ABS="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" # Fetch real directory, not symlink.  Spaces are well handled.
# SCRIPT_PATH_ABS="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" # Fetch real directory, not symlink.  Spaces are well handled.

SCRIPT_NAME_BASE="${SCRIPT_NAME/.sh}"
SCRIPT_NAMEANDPATH_ABS="${SCRIPT_PATH_ABS}/${SCRIPT_NAME}"
SCRIPT_PATH_ABS_PARENT=$(dirname "${SCRIPT_PATH_ABS}")

usage()
{
  echo -e "
\e[1;37;42m SAFE \e[0m

Usage:  ${SCRIPT_NAME} [-d] <file>+

  -x <resolution in X axis>     Default:  256
  -y <resolution in Y axis>     Default:  256
  -s <square resolution side>   Default:  256
  -n No change in resolution / use same resolution.
  -o <output directory>         Default is '.'.

  -h  Display this help text.
"
}



# ARGUMENT PARSING
# ════════════════════════════════════════════════════════════════════
DENSITY=600
RES_X="256"
RES_Y="256"
unset SQUARE_RES
OUTPUT_DIR="."

OPTIND=1 # Normally not required, except if the script is sourced.
         # Better be safe than sorry.
while getopts "no:z:s:x:y:h" OPTCMD; do
  case "${OPTCMD}" in
    "o")    OUTPUT_DIR="${OPTARG}";;
    "z")    DENSITY="${OPTARG}";;
    "s")    SQUARE_RES="${OPTARG}";;
    "x")    RES_X="${OPTARG}";;
    "y")    RES_Y="${OPTARG}";;
    "n")    RES_X=0;RES_Y="0";;
    "h"|*)  usage; exit 1;;
  esac
done

if [ ! -z "${SQUARE_RES}" ]; then
  RES_X="${SQUARE_RES}"
  RES_Y="${SQUARE_RES}"
fi

shift $((${OPTIND} - 1))  # Remove options from $@
IFS=$(echo -en "\n\b")    # Set IFS so if FILES in $@ have spaces,
                          # we separate FILES properly.

FILES=("$@") # If you want the number of elements of $@, use $#

# VALIDATION
# ════════════════════════════════════════════════════════════════════

ERRORS=""

if ((${#FILES[*]} == 0)); then
  ERRORS="${ERRORS} - You must provide at least one argument.\n"
fi

if [ ! -z "${ERRORS}" ]; then
  echo -e "\e[1;37;41mERROR:\e[0m  The following errors where detected.\n"
  echo -e "${ERRORS}"
  echo -e "Command aborted."
  exit 1
fi


# title()
# ────────────────────────────────────────────────────────────────────────────
#
#  call:  title "Test #1"
#  stdout:  ═ Test #1 2020-02-21 11:22:51 ════════════════════════════════════════════════════
title()
{
  local LINE="═══════════════════════════════════════════════════════════════════════════════"
  local TITLE="${1} "$(date "+${TIMESTAMP_FORMAT_HUMAN}")
  local SEPARATOR=$(printf "%s %s %s\n" "${LINE:1:1}" "${TITLE}" "${LINE:${#TITLE}}")
  echo "${SEPARATOR}"
}


convertWithInkscape()
{
  # From:  https://stackoverflow.com/questions/9853325/how-to-convert-a-svg-to-a-png-with-imagemagick
  set -x
  if [[ "$(inkscape --without-gui --version)" == *"0.9"* ]]; then
    inkscape --without-gui -w "${RES_X}" -h "${RES_Y}" "${FILE}" -e "${OUTPUT}"
  else
    #inkscape --without-gui -w "${RES_X}" -h "${RES_Y}" "${FILE}" --export-filename "${OUTPUT}"
    inkscape -w "${RES_X}" -h "${RES_Y}" "${FILE}" --export-filename "${OUTPUT}"
  fi
}

# Comment by Hans Deragon (hans@deragon.biz), 2020-07-17 11:00:35 EDT
# ImageMagick does not properly convert SVG to PNG, as mentionned at
#   https://stackoverflow.com/questions/9853325/how-to-convert-a-svg-to-a-png-with-imagemagick
# Use convertWithInkscape() instead.
convertWithImageMagick()
{
  # Order of arguments is important.  -density needs to be the first!
  convert \
    -density "${DENSITY}" \
    "${FILE}" \
    -resize "${RES_X}x${RES_Y}" \
    "${OUTPUT}"
}


# PROCESSING
# ────────────────────────────────────────────────────────────────────────────

mkdir -p "${OUTPUT_DIR}"

# Running through remaining arguments
for FILE in ${FILES[@]}; do

  FILENAME="${FILE%.*}"
  if [ "${RES_X}" == "0" -a "${RES_Y}" == "0" ]; then
    RESOLUTION=""
  else
    RESOLUTION="-${RES_X}x${RES_Y}"
  fi

  OUTPUT="${OUTPUT_DIR}/${FILENAME}${RESOLUTION}.png"

  title "Processing ${FILE} -> ${OUTPUT}"

  convertWithInkscape
done
