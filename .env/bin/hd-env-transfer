#!/bin/bash

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2024 Hans Deragon - AGPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
# released under the GNU Affero General public Picense which can be found at:
#
#     https://www.gnu.org/licenses/agpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

SCRIPT_NAME="${BASH_SOURCE[0]/*\/}" # Basename, efficient form.
SCRIPT_PATH_ABS="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" # Fetch real directory, not symlink.  Spaces are well handled.
# SCRIPT_PATH_ABS="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" # Fetch real directory, not symlink.  Spaces are well handled.

SCRIPT_NAME_BASE="${SCRIPT_NAME/.sh}"
SCRIPT_NAMEANDPATH_ABS="${SCRIPT_PATH_ABS}/${SCRIPT_NAME}"
SCRIPT_PATH_ABS_PARENT=$(dirname "${SCRIPT_PATH_ABS}")

usage()
{
  echo -e "
\e[1;37;42m SAFE \e[0m

Copies .hans.deragon to remote computer, but strips any file that are
not strictly necessary and/or are confidential.

Usage:  ${SCRIPT_NAME} [-d] [-h] <username@fqdn>

  <username@fqdn>  Destination to which the files should be transferred.

  -d  Dry-run.
  -f  Full copy of the environment, with no exclusions.
  -h  Display this help text.
"
}

run()
{
  if (( DRYRUN )); then
    echo "DRYRUN:  $@"
  else
    $@
  fi
}

# ARGUMENT PARSING
# ════════════════════════════════════════════════════════════════════

DRYRUN=0
FULL=0   # Do not copy over everything.

OPTIND=1 # Normally not required, except if the script is sourced.
         # Better be safe than sorry.
while getopts "o:defh" OPTCMD; do
  case "${OPTCMD}" in
    "o")    OPTIONS="${OPTARG}";;
    "d")    DRYRUN=1;;  # Run in dry-run mode.
    "f")    FULL=1;;    # Copy over everything.
    "h"|*)  usage; exit 1;;
  esac
done

shift $((${OPTIND} - 1))  # Remove options from $@
IFS=$(echo -en "\n\b")    # Set IFS so if FILES in $@ have spaces,
                          # we separate FILES properly.

DSTS=("$@") # If you want the number of elements of $@, use $#


# VALIDATION
# ════════════════════════════════════════════════════════════════════

ERRORS=""

if ((${#DSTS[*]} == 0)); then
  ERRORS="${ERRORS} - Destination is required as an argument.  Aborting.\n"
fi

for SRC in \
  "${HDENVBASE}" \
  "${HOME}/.hans.deragon" \
  "${HOME}/Seafile/Hans/.hans.deragon" \
  ""; do
  [ -d "${SRC}" ] && break
done

if [ -z "${SRC}" ]; then
  ERRORS="${ERRORS} - Could not setup source directory.  Aborting.\n"
fi

if [ ! -z "${ERRORS}" ]; then
  echo -e "\e[1;37;41mERROR:\e[0m  The following errors where detected.\n"
  echo -e "${ERRORS}"
  echo -e "Command aborted."
  exit 1
fi

if (( FULL == 0 )); then
  RSYNC_OPTIONS="
  --include='COPYRIGHT.txt' \
  --exclude='*.txt*' \
  --exclude='*.doc*' \
  --exclude='*.xls*' \
  --exclude='*.odt*' \
  --exclude='*.ods*' \
  --exclude='*.odp*' \
  --exclude='*.pdf*' \
  --exclude='*.jpg*' \
  --exclude='*.png*' \
  --exclude='*.gif*' \
  --exclude='*.tar*' \
  --exclude='*.zip*' \
  --exclude='*.log' \
  --exclude='*.out' \
  --exclude='*.sw?' \
  --exclude='**/personal' \
  --exclude='.netrwhist' \
  --exclude='Feuille de temps' \
  --exclude='conky' \
  --exclude='desktop' \
  --exclude='docs' \
  --exclude='lynx' \
  --exclude='obsolete' \
  --exclude='old' \
  --exclude='rsync*' \
  --exclude='**/__pycache__/**' \
  --exclude='*/windows' \
  --exclude='**/archive' \
  --exclude='**/mus*e' \
  --exclude='*home*' \
  --exclude='env.hd.linux.sh' \
  --exclude='*/bin/rsync*' \
  --exclude='*/bin/*email*' \
  --exclude='*/bin/vl*' \
  --exclude='*voxel*' \
  --exclude='env.pers*' \
  --exclude='seafile-ignore.txt' \
  --exclude='zCopy' \
  --exclude='${SCRIPT_NAME}' \
"
fi

if [[ "${OPTIONS}" == *"excludeprivate"* ]]; then
  RSYNC_OPTIONS="${RSYNC_OPTIONS}
  --exclude='*private*' \
  --exclude='*privé*' \
"
fi

for DST in ${DSTS[@]}; do

  echo -e "
\e[1;32;40m
══════════════════════════════════════════════════════════════════════════════
Transfer to:  ${DST}\e[0m
"

  if [ ! -d "${DST}" ]; then

    # Destination is not a directory, but a remote machine, probably.
    DST_USER="${DST/@*}"
    [[ "${DST_USER}" == ${DST} ]] && unset DST_USER  # No user provided.

    DST_PORT="${DST/*:}"
    [[ "${DST_PORT}" == ${DST} ]] && unset DST_PORT  # No port provided.

    DST_HOST="${DST/:*}"       # Filter out any port definition.
    DST_HOST="${DST_HOST/*@}"  # Filter out any user definition.

    DST="${DST_HOST}:"
    DST="${DST/::/:}" # It is possible that we added one ':' too many, so we
                      # remove it.

    [[ -z "${DST_PORT}" ]] && DST_PORT=22

    # # Ping cannot be used as many host these days, while up, do not
    # # respond to ping anymore.  Instead, we test the port directly.
    # #ping -w 1 "${DST_HOST}" >/dev/null 2>&1
    # tp --quiet "${DST_HOST}:${DST_PORT}"
    #
    # if (($?)); then
    #   echo "${DST}:${DST_PORT} is not open.  Skipping."
    #   continue
    # fi

    [ -n "${DST_USER}" ] && DST="${DST_USER}@${DST}"
    SSH_CMD="-e \"ssh -p ${DST_PORT}\""

  fi

  #echo "\${RSYNC_OPTIONS}=${RSYNC_OPTIONS}"
  eval rsync -av \
    ${RSYNC_OPTIONS} \
    --delete \
    --delete-excluded \
    --timeout=5 \
    ${SSH_CMD} \
    "\"${SRC}\"" "${DST}" \

    #--dry-run \

done
