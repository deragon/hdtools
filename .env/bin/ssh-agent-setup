#!/bin/bash

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2024 Hans Deragon - AGPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
# released under the GNU Affero General public Picense which can be found at:
#
#     https://www.gnu.org/licenses/agpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

# ======================================================================
# Comment by Hans Deragon, 2006/05/21, 11:15
#
# This file was a script downloaded from the web and heavily modified
# by Hans Deragon (hans@deragon.biz).  Unfortunately, the source
# of this script has been lost and cannot be found on the web.
#
# ======================================================================
#


######################################################################
# INSTALLATION
#
# Local computer:   Computer from which you are typing now.
# Remote computer:  Computer to which you want to ssh to.
#
# Create keys with ssh-keygen on local computer.  It will ask for a
# passphrase; save it.  Later this passphrase will be asked and it will
# allow you to access any remote computer where you would have sent your
# public key (be patient).
#
#   ssh-keygen -t dsa -b 2048
#
# Two files are created:
#
#   ~/.ssh/id_dsa ~/.ssh/id_dsa.pub
#
# Connect once with ssh to remote computer (it will ask for the
# password).  Add the contents of localcomputer:~/.ssh/id_dsa.pub to
# remotecomputer:~/.ssh/authorized_keys
#
# Logout from remote computer.  Source this script.  It will ask for a
# passphrase.  This is the passphrase you provided when executing
# ssh-keygen.
#
# ssh to remote computer.  No password is required.

#env | fgrep sh
#echo $SHELL

print()
{
  ((${PRINT})) && echo $@
}

# Checking if -q is passed as argument or if we are not connected to a tty.
# If any of these conditions are met, this script remains silent.
if [ "${1}" = "-q" -o ! -t 0 ]; then
  PRINT=0
else
  PRINT=1
fi

# Testing if we have permissions to access ${HOME}/.ssh/.  Sometimes
# we are another user and therefore ${HOME} does not point to the real
# user's home.  Thus, permissions are not given and there is no point
# in starting sshagent in such environment.
if [ ! -d ${HOME}/.ssh/. ]; then
  print "Cannot access ${HOME}/.ssh/.  Aborting."
  exit 1
fi

mkdir -p ${HOME}/.ssh/env
chmod 700 ${HOME}/.ssh/env

# HOSTNAME may actually contain the domain name (it happens under Mac OS X).
# Thus we truncate it at the '.', if any.
export SSH_ENV="${HOME}/.ssh/env/${HOSTNAME/.*}"

function start_ssh_agent
{
  if [ -w "${SSH_ENV}.sh" -o ! -f "${SSH_ENV}.sh" ]; then
    eval `ssh-agent -s | sed 's/^echo/#echo/'`

    # Rebuilding env files.  This is necessary because we might have
    # inherited valid values of $SSH_AUTH_SOCK and $SSH_AGENT_PID that
    # are not saved in these files.
    cat >${SSH_ENV}.sh <<EOF
export SSH_AUTH_SOCK=${SSH_AUTH_SOCK}
export SSH_AGENT_PID=${SSH_AGENT_PID}
EOF

    cat >${SSH_ENV}.csh <<EOF
setenv SSH_AUTH_SOCK ${SSH_AUTH_SOCK}
setenv SSH_AGENT_PID ${SSH_AGENT_PID}
EOF

    cat >${SSH_ENV}.py <<EOF
os.environ["SSH_AUTH_SOCK"]="${SSH_AUTH_SOCK}"
os.environ["SSH_AGENT_PID"]="${SSH_AGENT_PID}"
EOF

    cat >${SSH_ENV}.pl <<EOF
\${SSH_AUTH_SOCK}="${SSH_AUTH_SOCK}"
\${SSH_AGENT_PID}="${SSH_AGENT_PID}"
EOF
    print "ssh-agent started."
  else
    print "ssh-agent not started."
  fi
}

# Kills any rogue ssh-agent owned by the current user only.
# ssh-agent of other users rename unaffected.
killrogueagents()
{
  # SSH_AGENT_PID is not defined anywhere, but that does not mean
  # that there is no ssh-agent running for the user.  Trying to find at
  # least one.
  if [ "${HD_OS_FAMILY}" = "Cygwin" -o "${HD_OS_FAMILY}" = "MinGW" ] || [[ "$(uname)" == *"MINGW"* ]]; then

    [ -z "${USER}" ] && USER=`whoami`
    if (($? > 1)); then
      cat <<EOM
Cannot identify current user.  Rogue agents cannot be killed.
Operation continues however.
EOM
      return
    fi

    # CYGWIN and MinGW BUG:  ps -eo -> option -o is not available under these environments.
    export ROGUE_SSH_AGENT_PIDS=`ps -ef | fgrep "${USER}" | fgrep -v "<defunct>" | awk '{print $2, $6}' | perl -ne "if(/\d+\s+.+ssh-agent$/) { print; exit 1 }" | awk '{print $1}'`
  else
    # On some Linux system, ps -eo "user..." truncated the userid to 8 characters.  Thus instead, we use the euid.
    # EUID is a read-only variable already set by Bash.
    export ROGUE_SSH_AGENT_PIDS=$(ps -eo "euid pid comm" | perl -ne "if(/^\s*${EUID}\s+(\d+)\s+ssh-agent$/) { print \$1; exit 0 }")
  fi

  #print "ROGUE_SSH_AGENT_PIDS=${ROGUE_SSH_AGENT_PIDS}"
  # Ok, we have found a few rogue ssh-agents.  There are no use since we do not
  # know what state there in and what their $SSH_AUTH_SOCK is.  We kill them
  # all and start fresh.
  for PID in ${ROGUE_SSH_AGENT_PIDS}; do
    # If the PID is to good SSH agent, we must not kill it!
    if [ "${PID}" != "${SSH_AGENT_PID}" ]; then
      print "Killing rogue ssh-agent ${PID}."
      kill ${PID}
    fi
  done
}

check_ssh_agent()
{
  [ -r "${SSH_ENV}.sh" ] && source "${SSH_ENV}.sh" >/dev/null

  if [ -z "${SSH_AGENT_PID}" ]; then
    print "No running valid ssh-agent found."
    return 0
  elif ps -ef | egrep -Ev '(grep|<defunct>)' | egrep --extended-regexp "${SSH_AGENT_PID}.*ssh-agent" >/dev/null; then
    print "ssh-agent already running as PID ${SSH_AGENT_PID}."
    return 1
  else
    print "No running ssh-agent with PID ${SSH_AGENT_PID} found."
    return 0
  fi
}

if check_ssh_agent; then
  start_ssh_agent
fi

killrogueagents # Kill any rogue ssh-agent owned by the current user.

ssh-add -l >/dev/null
if (($?)); then
  print "No keys saved in ssh-agent.  Adding now."
  if [[ "${HD_OS_FAMILY,,}" == *"cygwin"* ]]; then
    # Pour une raison inconnue, soudainement en début 2012, cygwin
    # n'ajoute pas les clefs; il faut les spécifier.
    ssh-add "${HOME}/.ssh/id_rsa"
  else
    ssh-add
  fi
fi
