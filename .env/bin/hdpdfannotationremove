#!/bin/bash

# ─ Copyright Notice ───────────────────────────────────────────────────
#
# Copyright 2000-2021 Hans Deragon - GPL 3.0 licence.
#
# Hans Deragon (hans@deragon.biz) owns the copyright of this work.
#
# It is released under the GPL 3 licence which can be found at:
#
#     https://www.gnu.org/licenses/gpl-3.0.en.html
#
# ─────────────────────────────────────────────────── Copyright Notice ─

SCRIPT_NAME="${BASH_SOURCE[0]/*\/}" # Basename, efficient form.
SCRIPT_PATH_ABS=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")") # Fetch real directory, not symlink.  Spaces are well handled.

SCRIPT_NAME_BASE="${SCRIPT_NAME/.sh}"
SCRIPT_NAMEANDPATH_ABS="${SCRIPT_PATH_ABS}/${SCRIPT_NAME}"
SCRIPT_PATH_ABS_PARENT=$(dirname "${SCRIPT_PATH_ABS}")

usage()
{
  cat <<EOM
Usage:  ${SCRIPT_NAME} [-d] [-e] [-r <path>] [-h] <file>+

  -d  Dry-run.
  -i  In place replacement (default to \${FILE}-noannoations.pdf)
  -r  Recursive
  -h  Display this help text.
EOM
}

run()
{
  if (( DRYRUN )); then
    echo "DRYRUN:  $@"
  else
    eval $@
  fi
}

# ARGUMENT PARSING
# ════════════════════════════════════════════════════════════════════

DRYRUN=0
INPLACEREPL=0
RECURSIVEPATH=""

OPTIND=1 # Normally not required, except if the script is sourced.
         # Better be safe than sorry.
while getopts "ir:dh" OPTCMD; do
  case "${OPTCMD}" in
    "i")    INPLACEREPL=1;;
    "r")    RECURSIVEPATH="${OPTARG}";;
    "d")    DRYRUN=1;;  # Run in dry-run mode.
    "h"|*)  usage; exit 1;;
  esac
done

shift $((${OPTIND} - 1))  # Remove options from $@
IFS=$(echo -en "\n\b")    # Set IFS so if FILES in $@ have spaces,
                          # we separate FILES properly.


declare -a FILES

if [ ! -z "${RECURSIVEPATH}" ]; then
  readarray FILES < <(find "${RECURSIVEPATH}" -type f -name "*.pdf")
fi

echo "${#FILES[*]}"
FILES+=("$@") # If you want the number of elements of $@, use $#

# COMMANDLINE VALIDATION
# ════════════════════════════════════════════════════════════════════
#
# ERRORS=""
#
# if ((${#FILES[*]} == 0)); then
#   ERRORS="${ERRORS} - You must provide at least one argument.\n"
# fi
#
# if [ -z "${ENV}" ]; then
#   ERRORS="${ERRORS} - Environment must be provided.  Example: '-e acc'.\n"
# fi
#
# if [ ! -z "${ERRORS}" ]; then
#   echo -e "ERROR:  The following errors where detected.\n"
#   echo -e "ERREUR:  Les erreurs suivantes furent détectées.\n"
#   echo -e "${ERRORS}"
#   echo -e "Command aborted."
#   echo -e "Commande avortée."
#   exit 1
# fi
#
# TIMESTAMP_FILE=$(date +"%Y%m%dT%H%M%S") # ISO 8601 format.
# TIMESTAMP_START=$(date +"%s") # Seconds since epoch.
# TIMESTAMP_FORMAT_HUMAN="%Y-%m-%d %H:%M:%S %N"

# PROCESSING
# ════════════════════════════════════════════════════════════════════

TMPDIR="/tmp/${SCRIPT_NAME}-$$"
mkdir -p "${TMPDIR}"

for FILE in ${FILES[@]}; do

  FILENAME="${FILE[0]/*\/}" # Basename, efficient form.
  FILENAME="${FILENAME%.*}"
  EXTENSION="${FILE##*.}"

  if (( INPLACEREPL )); then
    FILEPATH="${FILE}"
  else
    FILEPATH="$(dirname ${FILE})/${FILENAME}.pdf"
  fi

  echo "${FILE} -> ${FILEPATH}"

  pdftk "${FILE}" \
    output "${TMPDIR}/${FILENAME}-uncompressed.pdf" \
    uncompress

  # LANG=C sed -n '/^/Annots/!p' \
  #   "${TMPDIR}/${FILENAME}-uncompressed.pdf" \
  #   >"${TMPDIR}/${FILENAME}-noannotations.pdf"

  LANG=C perl -ne 'print if ! /^\/Annots/' \
    "${TMPDIR}/${FILENAME}-uncompressed.pdf" \
    >"${TMPDIR}/${FILENAME}-noannotations.pdf"

  (( INPLACEREPL )) && run rm "${FILE}"
  pdftk "${TMPDIR}/${FILENAME}-noannotations.pdf" output "${FILEPATH}" compress

  # run "pdftk \"${FILE}\" output \
  #     \"${TMPDIR}/${FILENAME}-uncompressed.pdf\" uncompress
  #     "
  #
  # run "LANG=C sed -n '/^\/Annots/!p' \
  #   \"${TMPDIR}/${FILENAME}-uncompressed.pdf\" \
  #   >\"${TMPDIR}/${FILENAME}-noannotations.pdf\""
  #
  # (( INPLACEREPL )) && run rm "${FILE}"
  # run "pdftk \"${TMPDIR}/${FILENAME}-noannotations.pdf\" output \"${FILEPATH}\" compress"

done

rm -rf "${TMPDIR}"
