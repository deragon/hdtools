AWS - AMAZON WEB SERVICES


AWS S3
══════════════════════════════════════════════════════════════════════════════

  MISCELLANEOUS
  ────────────────────────────────────────────────────────────────────────────

    - All S3 buckets of the world share the same namespace.  Thus, if one
      creates a S3 bucket named 'tmp' in their account, nobody
      else in the world can create a bucket name 'tmp' in their own account.

      This also holds true if you have different AWS accounts for your
      environments DEV, PRD, etc...

      As a good practice, you can add your AWS account number as a suffix to
      the name to avoid any collision.  Example:  'tmp-123456789012'.



AWS CLI
══════════════════════════════════════════════════════════════════════════════

  AWS SSO LOGIN AND CREDENTIALS
  ────────────────────────────────────────────────────────────────────────────

    Create the AWS config file:

      cat <<EOF >>"${HOME}/.aws/config"
[default]
region = ca-central-1

# Development environment
[profile awsssodv]
sso_start_url = <Specifies the URL that points to the organization's AWS access portal.>
sso_region = ca-central-1
sso_account_id = <put account name here>
sso_role_name = <put SSO role here>
region = ca-central-1
output = json
EOF

    Setup a useful alias:

    alias awslogin='aws sso login --profile awsssodv'


    Then, download 'aws-sso-creds' from
    https://github.com/jaxxstorm/aws-sso-creds

    This utility will automatically populate the following variables:

      AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY
      AWS_SESSION_TOKEN

    Create the following alias to use 'aws-sso-creds'.

      alias awsdv='eval $(aws-sso-creds export --profile awsssodv); greenbg'



  aws s3 cp
  ────────────────────────────────────────────────────────────────────────────

    Copying from one s3 bucket to another s3 bucket
    ‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑

      - Does not involve any transfer locally to the machine where the
        'aws s3 cp' command was executed.

      - Tags found on the source object are preserved/copied to the
        destination object.


  List all objects in a bucket
  ────────────────────────────────────────────────────────────────────────────

    aws s3 ls s3://${S3_BUCKET} --recursive --human-readable --summarize | tee "${S3_BUCKET}.txt"



AWS CLOUDFORMATION
══════════════════════════════════════════════════════════════════════════════

  - Descriptions of resources must be a static String and never can be
    built from functions such as !Join or !Ref.

      https://stackoverflow.com/questions/39678784/validationerror-when-calling-the-createstack-operation-template-format-error

  - Understanding AWS CloudFormation !Sub syntax
      https://www.fischco.org/technica/2017/cloud-formation-sub/


  SHARE VARIABLES/VALUES BETWEEN CLOUDFORMATION STACKS
  ────────────────────────────────────────────────────────────────────────────

    From:  https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-systems-manager-parameter/

    Use SSM parameters in AWS Systems Manager Parameter Store to share values
    between CloudFormation stacks. An SSM parameter stores a value in one
    stack (stackA) that can be used by another stack (stackB).

    When you use an SSM parameter, there isn't a dependency between the two
    CloudFormation stacks. This is because the variable is stored in the AWS
    Systems Manager Parameter Store.


  Renaming of stacks is impossible.
  ────────────────────────────────────────────────────────────────────────────

    Renaming of stacks is impossible.  However, this is a trick:

    - Set all resources in the stack to retain on delete
    - Delete the stack, whilst retaining the resource
    - Create a new stack, importing the resources with their current state
      back into the stack

    See:  https://github.com/iann0036/cfn-stack-rename



AWS CLOUDWATCH
══════════════════════════════════════════════════════════════════════════════

  Log format
  ────────────────────────────────────────────────────────────────────────────

    - If a log contains a JSON in a single line, the CloudWatch interface
      will render the json pretty and show it on multiple lines, easily

      Therefor, it is highly recommended to express logs as JSON.



AWS LAMBDA
══════════════════════════════════════════════════════════════════════════════

  Make Lambda access EC2 port through a VPC
  ────────────────────────────────────────────────────────────────────────────

    Best practice would be to assign your Lambda function to a different
    security group than the EC2 instance. No inbound rules needed in the
    Lambda function's security group.

    Confirmed to work.  -- Hans Deragon, 2022-05

    From:  https://stackoverflow.com/questions/59742001/make-lambda-access-ec2-port-through-a-vpc



AWS ROOT ACCOUNT
══════════════════════════════════════════════════════════════════════════════

  From:  https://www.reddit.com/r/aws/comments/oorjl2/what_exactly_is_the_root_iam_principal/

    It represents the account, so yes it us both the account root user
    (non-IAM) and since IAM users, roles exist under the account this as a
    Principal will also mean all calls authenticated by the account. This
    predates the existence of IAM. Many people mistakenly use Principal: “*”
    which means any AWS authenticated credential in any account, not just
    their account.

  From:  https://www.quora.com/What-is-root-in-AWS-IAM

    In AWS resource policies, “root” in Principal ARNs refer to the entire
    account, for example arn:aws:iam::123456789012:root.

    While it is described as referring to the IAM root user, the default user
    that exists before any IAM identities are created, it can be confusing. A
    resource IAM policy that grants Allow access to root gives access to
    principals (users and roles) that have the IAM permissions.

    There is no way to declare that access to a resource can only be accessed
    by the root. This is already implicit, as a resource that does not allow
    permissions does allow the IAM root user to have access. See: Joe Garcia's
    answer to 'How can AWS IAM policy statements refer to the AWS account root
    user?'.

    KMS is one notable exception because the root user does not have implicit
    access when not listed in the key policy.



ACRONYMS
══════════════════════════════════════════════════════════════════════════════

  CDK - Cloud Development Kit



COSTS
══════════════════════════════════════════════════════════════════════════════

  Good reads:
  ────────────────────────────────────────────────────────────────────────────

    - AWS Customers Rack Up Hefty Bills For Moving Data
      https://hardware.slashdot.org/story/19/10/23/0517258/aws-customers-rack-up-hefty-bills-for-moving-data


  T3 cheaper than T2
  ────────────────────────────────────────────────────────────────────────────

    - https://www.densify.com/articles/aws-ec2-t3-burstable-instances


  S3
  ────────────────────────────────────────────────────────────────────────────

    - Does not cost much to send data into S3.
    - COST A LOT to push the data out of S3 into your own server.



TROUBLESHOOTING
══════════════════════════════════════════════════════════════════════════════

  Unable to validate the following destination configurations
  ────────────────────────────────────────────────────────────────────────────

    If this occurs when you attempt to connect an S3 bucket to a SNS topic,
    in the SNS's Access Policy, replace:

      "Condition": {
        "StringEquals": {
          "AWS:SourceOwner": "<account number here>"
        }

    with

      "Condition": {
        "StringEquals": {
          "AWS:SourceAccount": "<account number here>"
        }

    The default AWS:SourceOwner created by AWS when the topic was created
    is just wrong.  Who know why this is the default; AWS is often weird.

    See:  https://www.youtube.com/watch?v=RjSW75YsBMM at 18:00 minutes.


  64 CHARACTERS LIMIT FOR PATH AND ROLE NAME
  ────────────────────────────────────────────────────────────────────────────

    As of 2023-01-01, from: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_permissions-to-switch.html

      If you create the role programmatically, you can add a Path of up to 512
      characters and a RoleName. The role name can be up to 64 characters
      long.  HOWEVER, TO USE A ROLE WITH THE SWITCH ROLE FEATURE IN THE AWS
      MANAGEMENT CONSOLE, THE COMBINED PATH AND ROLENAME CANNOT EXCEED 64
      CHARACTERS.

    Thus if you want to switch role in the AWS console (web interface), the
    combination <path/role name> must not exceed this 64 characters limit.

█ ─ Copyright Notice ───────────────────────────────────────────────────
█
█ Copyright 2000-2023 Hans Deragon - GPL 3.0 licence.
█
█ Hans Deragon (hans@deragon.biz) owns the copyright of this work.
█
█ It is released under the GPL 3 licence which can be found at:
█
█     https://www.gnu.org/licenses/gpl-3.0.en.html
█
█ ─────────────────────────────────────────────────── Copyright Notice ─
