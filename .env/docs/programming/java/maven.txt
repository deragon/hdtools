SAUTER (SKIPPER) LES TESTS
══════════════════════════════════════════════════════════════════════════════

  Pour éviter la compilation et exécution des test:

    -Darguments="-Dmaven.test.skip=true"

  Pour éviter seulement l'exécution des tests:

    -DskipTests

  Pour un RELEASE, il faut utiliser:

    -Darguments="-Dmaven.test.skip=true"

    car Maven va faire un fork et appeler soit même pour le build,
    avec les arguments passer dans '-Darguments='

  Si un projet maven dépend d'un autre, il faut rouler la commande suivante
  sous le projet indépendant afin qu'il soit déployer localement dans le
  répertoire local M2 de Maven.

    mvn clean install -DskipTests

  Il existe aussi l'option -Dmaven.test.skip=true, mais ce n'est pas
  clair si c'est une vielle option désuète ou si elle est encore utile.

    mvn clean package -Dmaven.test.skip=true -DskipTests
    mvn clean install -Dmaven.test.skip=true -DskipTests



MAVEN BEST PRACTICES
══════════════════════════════════════════════════════════════════════════════

  Maven Best Practices - Don't Make the Same Mistake Twice
  http://mestachs.wordpress.com/2012/05/17/maven-best-practices/



PROPERTIES (VARIABLES)
══════════════════════════════════════════════════════════════════════════════

  From:  https://maven.apache.org/pom.html

  Properties are the last required piece in understanding POM basics. Maven
  properties are value placeholder, like properties in Ant. Their values are
  accessible anywhere within a POM by using the notation ${X}, where X is the
  property.

  They come in five different styles:

  - env.X: Prefixing a variable with "env." will return the shell's
    environment variable. For example, ${env.PATH} contains the PATH
    environment variable.

    Note: While environment variables themselves are case-insensitive on
    Windows, lookup of properties is case-sensitive. In other words, while the
    Windows shell returns the same value for %PATH% and %Path%, Maven
    distinguishes between ${env.PATH} and ${env.Path}. As of Maven 2.1.0, the
    names of environment variables are normalized to all upper-case for the
    sake of reliability.

  - project.x: A dot (.) notated path in the POM will contain the
    corresponding element's value. For example:
    <project><version>1.0</version></project> is accessible via
    ${project.version}.

  - settings.xml: A dot (.) notated path in the settings.xml will contain the
    corresponding element's value. For example:
    <settings><offline>false</offline></settings> is accessible via
    ${settings.offline}.

  - Java System Properties: All properties accessible via
    java.lang.System.getProperties() are available as POM properties, such as
    ${java.home}.  x: Set within a <properties /> element in the POM. The
    value of <properties><someVar>value</someVar></properies> may be used as
    ${someVar}.



JAR CONTENANT TOUTES LES DÉPENDANCES ET EXECUTANT
══════════════════════════════════════════════════════════════════════════════

  Pour créer à partir d'un projet un jar qui contient toute les dépendances,
  ajouter dans le pom.xml:

    </project>
      ...
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <configuration>
              <archive>
                <manifest>
                  <mainClass>com.example.maclasseavecmain</mainClass>
                </manifest>
              </archive>
              <descriptorRefs>
                <descriptorRef>jar-with-dependencies</descriptorRef>
              </descriptorRefs>
            </configuration>
          </plugin>
        </plugins>
      </build>
      ...
    </project>

  puis rouler:

    mvn assembly:single

  On exécute le fichier jar avec la commande:

    java -jar <nom du fichier.jar>

  Réf:  http://stackoverflow.com/questions/574594/how-can-i-create-an-executable-jar-with-dependencies-using-maven



LIFECYCLE
══════════════════════════════════════════════════════════════════════════════

  http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html


  CLEAN LIFECYCLE

    pre-clean                 executes processes needed prior to the actual project cleaning
    clean                     remove all files generated by the previous build
    post-clean                executes processes needed to finalize the project cleaning

  DEFAULT LIFECYCLE

    validate                  validate the project is correct and all necessary
                              information is available.

    initialize                initialize build state, e.g. set properties or
                              create directories.

    generate-sources          generate any source code for inclusion in
                              compilation.

    process-sources           process the source code, for example to filter
                              any values.

    generate-resources        generate resources for inclusion in the package.
    process-resources         copy and process the resources into the destination directory, ready for packaging.
    compile                   compile the source code of the project.
    process-classes           post-process the generated files from compilation, for example to do bytecode enhancement on Java classes.
    generate-test-sources     generate any test source code for inclusion in compilation.
    process-test-sources      process the test source code, for example to filter any values.
    generate-test-resources   create resources for testing.
    process-test-resources    copy and process the resources into the test destination directory.
    test-compile              compile the test source code into the test destination directory
    process-test-classes      post-process the generated files from test compilation, for example to do bytecode enhancement on Java classes. For Maven 2.0.5 and above.
    test                      run tests using a suitable unit testing framework. These tests should not require the code be packaged or deployed.
    prepare-package           perform any operations necessary to prepare a package before the actual packaging. This often results in an unpacked, processed version of the package. (Maven 2.1 and above)
    package                   take the compiled code and package it in its distributable format, such as a JAR.
    pre-integration-test      perform actions required before integration tests are executed. This may involve things such as setting up the required environment.
    integration-test          process and deploy the package if necessary into an environment where integration tests can be run.
    post-integration-test     perform actions required after integration tests have been executed. This may including cleaning up the environment.
    verify                    run any checks to verify the package is valid and meets quality criteria.
    install                   install the package into the local repository, for use as a dependency in other projects locally.
    deploy                    done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.

  SITE LIFECYCLE

    pre-site                  executes processes needed prior to the actual project site generation
    site                      generates the project's site documentation
    post-site                 executes processes needed to finalize the site generation, and to prepare for site deployment
    site-deploy               deploys the generated site documentation to the specified web server



COMMANDES UTILES
══════════════════════════════════════════════════════════════════════════════

  Advenant que maven décide de tenter de trouver une vielle version
  d'un snapshot qui n'existe plus (version avec une date générée),
  une remise-à-zéro peu être accomplie avec:

    mvn clean install --update-snapshots

  Création d'un jar:

    mvn clean compile jar:jar -DskipTests

  Deployer un snapshot vers le repository:

    mvn deploy  -Dmaven.test.skip=true -DskipTests
    mvn install -Dmaven.test.skip=true -DskipTests

  Pour faire un release:

    mvn release

  Pour afficher l'arbre de dépendance pour un artifact particulier,
  ici par exemple, commons-collections de Apache:

    https://maven.apache.org/plugins/maven-dependency-plugin/tree-mojo.html

    mvn dependency:tree -Dverbose | tee maven-dependencies.txt
    mvn dependency:tree -Dverbose -Dincludes=commons-collections | tee maven-dependencies.txt

  Pour faire afficher le classpath que maven utiliserait:

    mvn dependency:build-classpath

  Pour forcer le téléchargement local des dépendances:

    mvn <goal> -U

    ou

    mvn dependency:go-offline


  Traces ou debug

    mvn -X <goal>


  FORCE DOWNLOADING OF SOURCES AND DOCUMENTATION (API / JAVADOC)
  ────────────────────────────────────────────────────────────────────────────

    mvn -U <goal> # Force to check remote and not use cache.

    List dependencies: mvn versions:display-dependency-updates

    Force downloading of all source used by project:

      mvn dependency:sources

      or

      mvn dependency:resolve -Dclassifier=sources # Not tested/confirmed.

    Force downloading of all documentation:

      mvn dependency:resolve -Dclassifier=javadoc



INSTALL A JAR FILE IN A REPOSITORY
══════════════════════════════════════════════════════════════════════════════

  From:  https://stackoverflow.com/questions/442230/how-to-manually-install-an-artifact-in-maven-2

  mvn install:install-file \
    -DgroupId=${GROUPID} \
    -DartifactId=${ARTIFACTID} \
    -Dversion=${VERSION} \
    -Dpackaging=jar \
    -Dfile=${PATH_TO_JAR} \
    -DgeneratePom=true



TESTS
══════════════════════════════════════════════════════════════════════════════

  To run a single test method in Maven, you need to provide the command as:

    mvn -Dtest=TestCircle#xyz test

  where TestCircle is the test class name and xyz is the test method.

  Wild card characters also work; both in the method name and class name.



POM - IGNORE DES FICHIERS
══════════════════════════════════════════════════════════════════════════════

  I'm not very familiar with maven-release-plugin, but I can see that there is
  a checkModificationExcludes property that you can use for your purpose. The
  config should be somewhat like this:

  <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-release-plugin</artifactId>
    <version>2.2.2</version>
    <configuration>
      ...
      <checkModificationExcludes>
        <checkModificationExclude>.classpath</checkModificationExclude>
      </checkModificationExcludes>
    </configuration>
  </plugin>



ECLIPSE
══════════════════════════════════════════════════════════════════════════════

  DOCUMENTATION DE L'API DANS ECLIPSE
  ------------------------------------------------------------

    Sans avoir a changer le pom.xml, il suffit de rouler la commande suivante
    dans la racine du projet et automatiquement, les sources et le javadoc
    sera téléchargé, et Eclipse va s'en servir sans avoir besoin d'être
    redémarré.

    mvn eclipse:eclipse -DdownloadSources -DdownloadJavadocs



PROFILES
══════════════════════════════════════════════════════════════════════════════

  Here is from the mvn --help:

  -P,--activate-profiles            Comma-delimited list of profiles



CHARACTER ENCODING / CHARACTER SET / UTF-8 UTF8 LATIN1 ISO-8859-1
══════════════════════════════════════════════════════════════════════════════

  POM.XML
  ────────────────────────────────────────────────────────────────────────────

    <project>
      <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
      </properties>
    </project>


  Calling maven and specifying the encoding
  ────────────────────────────────────────────────────────────────────────────

    See java.txt for details
    mvn -Dfile.encoding=UTF-8 -Dproject.build.sourceEncoding=UTF-8



ORACLE JDBC DRIVERS (INSTALLATION)
══════════════════════════════════════════════════════════════════════════════

  From:  http://stackoverflow.com/questions/1074869/find-oracle-jdbc-driver-in-maven-repository

  Unfortunately due the binary license there is no public repository with the
  Oracle Driver JAR. This happens with many dependencies but is not Maven's
  fault. If you happen to find a public repository containing the JAR you can
  be sure that is illegal.

  How do I add it so that Maven will use it?

  Some JARs that can't be added due to license reasons have a pom entry in the
  Maven Central repo. Just check it out, it contains the vendor's preferred
  Maven info:

  <groupId>com.oracle</groupId>
  <artifactId>ojdbc14</artifactId>
  <version>10.2.0.3.0</version>

  ...and the URL to download the file which in this case is
  http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/index.html.

  Once you've downloaded the JAR just add it to your computer repository with
  (note I pulled the groupId, artifactId and version from the POM):

  mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 \
      -Dversion=10.2.0.3.0 -Dpackaging=jar -Dfile=ojdbc.jar -DgeneratePom=true

  mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 \
      -Dversion=10.2.0.4.0 -Dpackaging=jar -Dfile=ojdbc14.jar -DgeneratePom=true

  The last parameter for generating a POM will save you from pom.xml warnings

  If your team has a local Maven repository this guide might be helpful to
  upload the JAR there.



PLUGINS
══════════════════════════════════════════════════════════════════════════════

  SpotBugs - https://spotbugs.github.io/
  ────────────────────────────────────────────────────────────────────────────

    SpotBugs is a program which uses static analysis to look for bugs in Java
    code. It is free software, distributed under the terms of the GNU Lesser
    General Public License.

    SpotBugs is the spiritual successor of FindBugs, carrying on from the
    point where it left off with support of its community. Please check
    official manual site for details.


  Findbugs Maven Plugin - https://github.com/gleclaire/findbugs-maven-plugin
  ────────────────────────────────────────────────────────────────────────────

    Findbugs is no longer maintained, please use Spotbugs (voir ci-dessus)



DISABLE A MAVEN PLUGIN DEFINED IN A PARENT POM / IGNORE
══════════════════════════════════════════════════════════════════════════════

  From:  http://stackoverflow.com/questions/7821152/disable-a-maven-plugin-defined-in-a-parent-pom

  <plugin>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>findbugs-maven-plugin</artifactId>
      <executions>
          <execution>
              <phase>none</phase>
          </execution>
      </executions>
  </plugin>



ALTERNATIVES
══════════════════════════════════════════════════════════════════════════════

  Bazel (from Google)
  ────────────────────────────────────────────────────────────────────────────

    Google is in the process of moving their Java projects from Maven to
    Bazel (2019-10).  Main feature:  superfast.

    https://opensource.googleblog.com/2019/10/bazel-reaches-10-milestone.html
    https://docs.bazel.build/versions/master/getting-started.html



█ ─ Copyright Notice ───────────────────────────────────────────────────
█
█ Copyright 2000-2024 Hans Deragon - AGPL 3.0 licence.
█
█ Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
█ released under the GNU Affero General public Picense which can be found at:
█
█     https://www.gnu.org/licenses/agpl-3.0.en.html
█
█ ─────────────────────────────────────────────────── Copyright Notice ─
