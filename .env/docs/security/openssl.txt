READING
══════════════════════════════════════════════════════════════════════════════

  - Excellents:

    - https://gist.github.com/mohanpedala/468cf9cef473a8d7610320cff730cdd1
    - https://www.xolphin.com/support/OpenSSL/Frequently_used_OpenSSL_Commands



PEM, DER, CRT, and CER: X.509 Encodings and Conversions
══════════════════════════════════════════════════════════════════════════════

  From:  https://www.ssl.com/guide/pem-der-crt-and-cer-x-509-encodings-and-conversions/#:~:text=PEM%20(originally%20%E2%80%9CPrivacy%20Enhanced%20Mail,%2D%2D%2D%2D%2D%20).

  You may have seen digital certificate files with a variety of filename
  extensions, such as .crt, .cer, .pem, or .der. These extensions generally
  map to two major encoding schemes for X.509 certificates and keys: PEM
  (Base64 ASCII), and DER (binary). However, there is some overlap and other
  extensions are used, so you can’t always tell what kind of file you are
  working with just from looking at the filename; you may need to open it in a
  text editor and take a look for yourself.


  From:  https://stackoverflow.com/questions/38976885/difference-between-x-509-and-pem

  X.509 is a series of standards, while PEM is just X.509 object representation in a file (encoding).



PEM FILE - USE THIS FORMAT
══════════════════════════════════════════════════════════════════════════════

  PEM (originally “Privacy Enhanced Mail”) is the most common format for X.509
  certificates, CSRs, and cryptographic keys.

      openssl x509 -text -noout -in "${FILE_PEM}"  # Safe.  Show content of trusted certificates.
      openssl req  -text -in "${FILE_PEM}" # Safe.  Show content of CSR file.
      file "${FILE_PEM}" # Safe.  Test if the file is really a PEM file.


  CSR = Certificate Signing Request



PFX FILE - AVOID THIS FORMAT
══════════════════════════════════════════════════════════════════════════════

  From Wikipedia:

    PFX has received heavy criticism of being one of the most complex
    cryptographic protocols, but nevertheless remains the only standard way
    today to store private keys and certificates in a single encrypted file.


  Extraction d'un certificat client en fichier PEM (Privacy Enhanced Mail Base64 encoded DER certificate)
  ────────────────────────────────────────────────────────────────────────────

    Avertissement! Java keytool ne comprend pas ce format, il faut ensuite le
    convertir en DER (voir ci-dessous).

       openssl pkcs12 -in <fichier>.pfx -clcerts -nokeys -out <fichier>.pem

    Conversion d'un certificat client PEM en DER (Distinguished Encoding Rules), un format binaire.
    Java keytool est capable de lire ce format.

       openssl x509 -inform pem -in <fichier>.pem -outform der -out <fichier>.crt

    Références:

        * stackoverflow.com convert-pfx-to-cer
        * Wikipedia PKCS12



JAVA
══════════════════════════════════════════════════════════════════════════════

  Read/See:

    - https://www.baeldung.com/java-keystore-truststore-difference


    - GUI -> KeyStore Explorer - Open source, Linux, Win, Mac.
             Very good.  https://keystore-explorer.org/



  KEYSTORE
  ────────────────────────────────────────────────────────────────────────────

    A Java keystore stores private key entries, certificates with public
    keys or just secret keys


  TRUSTSTORE
  ────────────────────────────────────────────────────────────────────────────

    While a keystore typically holds onto certificates that identify us, a
    truststore holds onto certificates that identify others.


    truststore.jks vs truststore.p12 (PKCS12)
    ‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑

      - truststore.p12:  New comptabile format PKCS12 with OpenSSL supported by JDK 8+
                         USE THIS.

        openssl pkcs12 -info -in truststore.p12
        keytool -import -trustcacerts -noprompt -storepass xxxx -alias abc-sha2 -file /home/ec2-user/abc-sha2.cer -keystore /usr/jdk64/jdk1.8.0_112/jre/lib/security/cacerts

        Convert *.jks -> *.p12  https://stackoverflow.com/questions/2846828/converting-jks-to-p12

      - truststore.jks:  Old deprecated format, only compatible with Java.


    Ajout d'un certificat client dans une JDK
    ‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑

    Voici comment l'on ajoute un certificat pour que Java puisse le reconnaître et
    que les applications puissent s'en servir.

    Notes:

        * Le certificat doit être en format DER. Voir Fichier PFX.
        * Le fichier de keystore de Java réside à même le répertoire de Java
          ("${JAVA_HOME}/jre/lib/security/cacerts"). Il est donc important de le
          recopier lorsque l'on change de jdk, pour une mise-à-jour de ce dernier
          par exemple.
        * changeit est le mot de passe par défaut du keystore de Java et il n'a
          jamais été changé dans les environnements.

    keytool \
     -import \
     -v \
     -cacerts \
     -file <fichier>.crt \
     -storepass changeit \
     -keystore "${JAVA_HOME}/jre/lib/security/cacerts"


    Keytool:  What values may be used for the storetype
    ‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑

      From:  https://stackoverflow.com/questions/65878490/keytool-what-values-may-be-used-for-the-storetype

      - jceks
      - jks
      - dks
      - pkcs11
      - pkcs12



APACHE SERVER
══════════════════════════════════════════════════════════════════════════════

  From:  https://knowledge.digicert.com/solution/SO21807.html

  Use OpenSSL to convert PFX file (PKCS#12) to compatible (X.509) files for
  Apache server.

  To extract the certificate, private key and more, run the OpenSSL command:

   openssl pkcs12 -in "${FILE_PREFIX}.pfx" -nocerts -out "${FILE_PREFIX}-private-key.pem"

  Then check the content of "${FILE_PREFIX}-private-key.pem" with a text
  editor to get what you need.

  To extract the certificate (public key), run the OpenSSL command:

    openssl pkcs12 -in "${FILE_PREFIX}.pfx" -clcerts -nokeys -out "${FILE_PREFIX}-public-key.pem"

█ ─ Copyright Notice ───────────────────────────────────────────────────
█
█ Copyright 2000-2022 Hans Deragon - GPL 3.0 licence.
█
█ Hans Deragon (hans@deragon.biz) owns the copyright of this work.
█
█ It is released under the GPL 3 licence which can be found at:
█
█     https://www.gnu.org/licenses/gpl-3.0.en.html
█
█ ─────────────────────────────────────────────────── Copyright Notice ─
