GUI
══════════════════════════════════════════════════════════════════════════════

  In active development
  ────────────────────────────────────────────────────────────────────────────

    - Goneovim - BEST

      Project:        https://github.com/akiyosi/goneovim
      Binaries:       https://github.com/akiyosi/goneovim/releases
      Configuration:  ${HOME}/.config/goneovim/settings.toml

      As of 2025-03-21, in active development, but buggy on WSL2.

    - Neovim QT
      https://github.com/equalsraf/neovim-qt

    - Neovide
      https://neovide.dev/

      This is a simple, no-nonsense, cross-platform graphical user interface
      for Neovim (an aggressively refactored and updated Vim editor). Where
      possible there are some graphical improvements, but functionally it
      should act like the terminal UI.

      Code:  https://github.com/neovide/neovide


  As of 2023-11-20, those that seams abandoned
  ────────────────────────────────────────────────────────────────────────────

    - gnvim, last update 2023-08-26
      https://github.com/vhakulinen/gnvim

    - FVim, last update 2023-05-11
      https://github.com/yatli/fvim

    - Reovim, last update 2023-01-14
      https://github.com/songww/reovim

    - nvim-ui, last update 2022-12-06
      https://github.com/sakhnik/nvim-ui



LUA
══════════════════════════════════════════════════════════════════════════════

  require() vs dofile()
  ────────────────────────────────────────────────────────────────────────────

    Lua offers a higher-level function to load and run libraries, called
    require. Roughly, require does the same job as dofile, but with two
    important differences. First, require searches for the file in a path;
    second, require controls whether a file has already been run to avoid
    duplicating the work. Because of these features, require is the preferred
    function in Lua for loading libraries.

    Ref:  https://www.lua.org/pil/8.1.html

    From nvim help:

      dofile({filename})                                      *dofile()*
              Opens the named file and executes its contents as a Lua chunk. When
              called without arguments, `dofile` executes the contents of the
              standard input (`stdin`). Returns all values returned by the chunk. In
              case of errors, `dofile` propagates the error to its caller (that is,
              `dofile` does not run in protected mode).

      :luafile {file}
          Execute Lua script in {file}.
          The whole argument is used as the filename (like |:edit|), spaces do not
          need to be escaped. Alternatively you can |:source| Lua files.

          Examples: >vim
              :luafile script.lua
              :luafile %



█ ─ Copyright Notice ───────────────────────────────────────────────────
█
█ Copyright 2000-2025 Hans Deragon - AGPL 3.0 licence.
█
█ Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
█ released under the GNU Affero General Public License which can be found at:
█
█     https://www.gnu.org/licenses/agpl-3.0.en.html
█
█ ─────────────────────────────────────────────────── Copyright Notice ─
