SNOWFLAKE


GRANT
══════════════════════════════════════════════════════════════════════════════

  Caveats
  ────────────────────────────────────────────────────────────────────────────

    Granting a privilege to a role is not enough for it to be effective.
    One must also grant "USAGE" to the schema to the role.

      grant SELECT on view "<someview>" to role <some role>;           -- Not enough
      grant USAGE on schema <schema of someview> to role <some role>;  -- Now the 'select' works.



SQL
══════════════════════════════════════════════════════════════════════════════

  TIMESTAMPS - to_timestamp_ltz()
  ────────────────────────────────────────────────────────────────────────────

    -- Queries between a specific time range.
    select *
    from table(
      information_schema.QUERY_HISTORY_BY_USER(
        USER_NAME => '<some user>',
        end_time_range_start => to_timestamp_ltz('2021-09-03 18:05:00.000 -0500'),
        end_time_range_end   => to_timestamp_ltz('2021-09-03 18:06:00.000 -0500')
       ))
    order by start_time;

    -- Queries of the last 24 hours.
    select *
    from table(
      information_schema.QUERY_HISTORY(
        end_time_range_start => TIMESTAMPADD(DAY, -1, current_timestamp()),
        end_time_range_end   => current_timestamp()
       ))
    order by start_time;


  MISCELLANEOUS
  ────────────────────────────────────────────────────────────────────────────

    - select 'test';  -- Oracle's 'dual' equivalent; no 'from' statement.


  GROUPBY MONTH
  ────────────────────────────────────────────────────────────────────────────

    -- Number of queries per months across the whole account.
    select
      to_varchar(date_trunc('MONTH',start_time), 'YYYY-MM') as MONTH, -- DAY, MONTH, WEEK, MONTH, YEAR
      count(query_id) as number_of_queries
    from "SNOWFLAKE"."ACCOUNT_USAGE"."QUERY_HISTORY"
    group by 1 order by MONTH desc;

        MONTH      NUMBER_OF_QUERIES
        2020-02    36903
        2020-01     1572


  Groupby null
  ────────────────────────────────────────────────────────────────────────────

    select
      IFF(DELETED is NULL, 'IN SERVICE', 'DELETE' ) as STATE,
      count(*) as COUNT
    from "SNOWFLAKE"."ACCOUNT_USAGE"."STAGES"
    group by 1;



RESULT_SCAN
══════════════════════════════════════════════════════════════════════════════

  select * from table(result_scan('<uuid>')) where ...;
  select * from table(result_scan(last_query_id())) where ...;

  Important:

    - You must double quote (") the name of the column in the 'where' statement.
    - You must single quote (') the value to compare in the 'where' statement.

  Example:

    show grants to role sysadmin;
    select * from table(result_scan(last_query_id())) where "granted_on" = 'WAREHOUSE';



PROCEDURES
══════════════════════════════════════════════════════════════════════════════

  ⚠ IMPORTANT:

    When specifying a procedure, you must always provide the types of all the arguments,
    as procedures in Snowflake support overloading, i.e. more than one procedure
    can have the same name, but different list of arguments.

  -- Show ownership of procedure
  -- Parentheses with arguments MUST be outside of double quotes for 'describe' to work.
  show grants on procedure "<DATABASE>"."<SCHEMA>"."<PROCEDURE>"(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, BOOLEAN);

  -- Does not show the ownership.
  describe PROCEDURE "<DATABASE>"."<SCHEMA>"."<PROCEDURE>"(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, BOOLEAN);
  SHOW PROCEDURES like '<Procedure names>';  -- DOES NOT SHOW OWNERSHIP.



OWNERSHIP
══════════════════════════════════════════════════════════════════════════════

  use database <DATABASE>;

  -- Show ownership of procedure
  -- Parentheses with arguments MUST be outside of double quotes for 'describe' to work.
  show grants on procedure "<DATABASE>"."<SCHEMA>"."<PROCEDURE>"(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, BOOLEAN);

  grant ownership on procedure <DATABASE>.<SCHEMA>.<PROCEDURE>(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, BOOLEAN) to role "<ROLE>" REVOKE CURRENT GRANTS;
  grant usage     on procedure <DATABASE>.<SCHEMA>.<PROCEDURE>(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, BOOLEAN) to role "<ROLE>";



GENERATE SQL FROM REQUEST
══════════════════════════════════════════════════════════════════════════════

  From:  https://stackoverflow.com/questions/62797022/cloning-a-role-or-copying-grants-to-a-new-role-in-snowflake

    show grants to role SYSADMIN;

    select 'grant all privileges on stream ' || rpad('"' || "database_name" || '"."' || "schema_name" || '"."' || "name" || '"' , 64, ' ') || ' to role "MYROLE";' as "-- SQL commands generated." from table(result_scan(last_query_id()));



TERRAFORM
══════════════════════════════════════════════════════════════════════════════

  Obtain latest version number at:
    https://registry.terraform.io/providers/Snowflake-Labs/snowflake/latest

  Plugin code at:
    https://github.com/Snowflake-Labs/terraform-provider-snowflake


USER MANAGEMENT
══════════════════════════════════════════════════════════════════════════════

 UNLOCK USER
  ────────────────────────────────────────────────────────────────────────────

      use role accountadmin;  -- Curiously, securityadmin is not enough.
      alter user <USERNAME> set mins_to_unlock=0;
