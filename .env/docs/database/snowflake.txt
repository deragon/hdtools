SNOWFLAKE


COMMON COMMANDS - CHEAT SHEET
══════════════════════════════════════════════════════════════════════════════

set LAST_QUERY_ID=(select last_query_id());
select * from table(result_scan($LAST_QUERY_ID));

  ────────────────────────────────────────────────────────────────────────────

-- Remove all grants from a role.
-- SAFE because this generates the commands to revoke, but does not
-- executed them.
show grants to role "< role name here >";
set LAST_QUERY_ID=(select last_query_id());
select * from table(result_scan($LAST_QUERY_ID));
select 'REVOKE ' || "privilege" || ' ON ' || "granted_on" || ' FROM ' || "granted_to" || ' FROM ' || "grantee_name" || ';' from table(result_scan($LAST_QUERY_ID));


LIKE
══════════════════════════════════════════════════════════════════════════════

  - Any documentation from Snowflake with the term 'Considerations' are
    actually guides to best practices.  To get the list, visit:
    https://docs.snowflake.com/search?q=considerations

  From:  https://docs.snowflake.com/en/sql-reference/functions/like

  - SQL wildcards are supported in pattern:

    - An underscore (_) matches any single character.

    - A percent sign (%) matches any sequence of zero or more characters.

    - There is no default escape character.

  - Wildcards in pattern include newline characters (\n) in subject as matches.

  - LIKE pattern matching covers the entire string. To match a sequence anywhere within a string, start and end the pattern with %.

  - NULL does not match NULL. In other words, if the subject is NULL and the pattern is NULL, that is not considered a match.

    'SOMETHING%' LIKE 'A-_%' ESCAPE '-';

  If you use the backslash as an escape character, then you must specify
  escape the backslash in the ESCAPE clause. For example, the following
  command specifies that the escape character is the backslash, and then
  uses that escape character to search for ‘%’ as a literal (without the
  escape character, the ‘%’ would be treated as a wildcard):

    'SOMETHING%' LIKE '%\\%%' ESCAPE '\\';

  - LIKE ANY (<pattern1> [, <pattern2> ... ] )



GRANT
══════════════════════════════════════════════════════════════════════════════

  Caveats
  ────────────────────────────────────────────────────────────────────────────

    Granting a privilege to a role is not enough for it to be effective.
    One must also grant "USAGE" to the schema to the role.

      grant SELECT on view "<someview>" to role <some role>;           -- Not enough
      grant USAGE on schema <schema of someview> to role <some role>;  -- Now the 'select' works.



VIEWS
══════════════════════════════════════════════════════════════════════════════

  Transfer of rights when a view points to another view
  ────────────────────────────────────────────────────────────────────────────

    If you create a view A on DB 1 that retrieves data from a view B on DB 2,
    users with read access to view A will be able to see the data coming from
    view B, provided that the owner of view A has the necessary rights to view
    B. Users do not need direct access to view B, but the owner of view A must
    have the necessary rights to the view B so users can query view A and see
    the data.



SQL
══════════════════════════════════════════════════════════════════════════════

  TIMESTAMPS - to_timestamp_ltz()
  ────────────────────────────────────────────────────────────────────────────

    -- Queries between a specific time range.
    select *
    from table(
      information_schema.QUERY_HISTORY_BY_USER(
        USER_NAME => '<some user>',
        end_time_range_start => to_timestamp_ltz('2021-09-03 18:05:00.000 -0500'),
        end_time_range_end   => to_timestamp_ltz('2021-09-03 18:06:00.000 -0500')
       ))
    order by start_time;

    -- Queries of the last 24 hours.
    select *
    from table(
      information_schema.QUERY_HISTORY(
        end_time_range_start => TIMESTAMPADD(DAY, -1, current_timestamp()),
        end_time_range_end   => current_timestamp()
       ))
    order by start_time;


    TIMESTAMPS and WHERE
    --------------------------------------------------------------------------

        and DATE_TRUNC('day', <timestamp_field_name_here>) = current_date() -- Timestamp field match today.


  DUAL
  ────────────────────────────────────────────────────────────────────────────

    SINGLE ROWS
    ‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑

      select 'test';  -- Oracle's 'dual' equivalent; no 'from' statement.


    MULTIPLE ROWS
    ‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑

      -- Example #0

      -- pseudofunctionfornewcolumn() is not a function, just an artefact to
      -- generate the column named 'model'.
      select '1970' as year, model
      from (values ('model1'), ('model2')) as pseudofunctionfornewcolumn(model);


      From:  https://stackoverflow.com/questions/63017612/how-to-select-multiple-rows-with-fake-data-in-snowflake

      -- Example #1

      select $1 AS txt,
             $2 as num
      from
        ( values
          (1,'one'),
          (2,'two'),
          (3,'three') );

      -- Example #2

      with
        fake_rows as (
          select
            1 as num,
            'one' as txt
       union
          select
            2,
            'two'
       union
          select
            3,
            'three'
        )
      select $1 AS txt,
             $2 as num
      from fake_rows;


  GROUP BY MONTH
  ────────────────────────────────────────────────────────────────────────────

    -- Number of queries per months across the whole account.
    select
      to_varchar(date_trunc('MONTH',start_time), 'YYYY-MM') as MONTH, -- DAY, MONTH, WEEK, MONTH, YEAR
      count(query_id) as number_of_queries
    from "SNOWFLAKE"."ACCOUNT_USAGE"."QUERY_HISTORY"
    group by 1 order by MONTH desc;

        MONTH      NUMBER_OF_QUERIES
        2020-02    36903
        2020-01     1572


  GROUP BY NULL
  ────────────────────────────────────────────────────────────────────────────

    select
      IFF(DELETED is NULL, 'IN SERVICE', 'DELETE' ) as STATE,
      count(*) as COUNT
    from "SNOWFLAKE"."ACCOUNT_USAGE"."STAGES"
    group by 1;


  PERCENTAGE OF TOTAL USING GROUP BY WITH COUNT() AND SUM()
  ────────────────────────────────────────────────────────────────────────────

    show users;
    set LAST_QUERY_ID=(select last_query_id());
    select count(*) as Number,
           round(Number*100/sum(number) over(), 2) as Percentage,
           "default_role"
      from table(result_scan($LAST_QUERY_ID))
      group by "default_role" order by number desc;


VARIABLES
══════════════════════════════════════════════════════════════════════════════

  set DATABASE_NAME = '<Database name>';
  set SCHEMA_NAME   = '<Schema name>';

  -- Always concatenate and assign to variables.  Usually, concatenating
  -- directly in a command such as 'use database' does not work.
  set DB_AND_SC = $DATABASE_NAME || '.' || $SCHEMA_NAME;

  select $DATABASE_NAME as DB, $SCHEMA_NAME as SC, $DB_AND_SC as DB_AND_SC;  -- To debug variables.

  -- One needs to use identifier() to referencing an object.
  use database identifier($DATABASE_NAME);
  use schema   identifier($SCHEMA_NAME);

  select current_database();



RESULT_SCAN
══════════════════════════════════════════════════════════════════════════════

  -- Using variables to save the last query ID.

  show pipes in account;
  set LAST_QUERY_ID=(select last_query_id());
  select * from table(result_scan($LAST_QUERY_ID));
  select "database_name" || '.' || "name", "error_integration" from table(result_scan($LAST_QUERY_ID)) where "error_integration" is not NULL;


  -- Less sophisticated requests...

  select * from table(result_scan('<uuid>')) where ...;
  select * from table(result_scan(last_query_id())) where ...;

  select last_query_id(); -- Returns à UUID to use in next statement.
  select * from table(result_scan('<UUID here>'));



  Important:

    - You must double quote (") the name of the column in the 'where' statement.
    - You must single quote (') the value to compare in the 'where' statement.

  Example:

    show grants to role sysadmin;
    select * from table(result_scan(last_query_id())) where "granted_on" = 'WAREHOUSE';



PROCEDURES
══════════════════════════════════════════════════════════════════════════════

  ⚠ IMPORTANT:

    When specifying a procedure, you must always provide the types of all the arguments,
    as procedures in Snowflake support overloading, i.e. more than one procedure
    can have the same name, but different list of arguments.

  -- Show ownership of procedure
  -- Parentheses with arguments MUST be outside of double quotes for 'describe' to work.
  show grants on procedure "<DATABASE>"."<SCHEMA>"."<PROCEDURE>"(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, BOOLEAN);

  -- Does not show the ownership.
  describe PROCEDURE "<DATABASE>"."<SCHEMA>"."<PROCEDURE>"(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, BOOLEAN);
  SHOW PROCEDURES like '<Procedure names>';  -- DOES NOT SHOW OWNERSHIP.



TASKS
══════════════════════════════════════════════════════════════════════════════

  Fetch error message on tasks executions
  ────────────────────────────────────────────────────────────────────────────

    select * from snowflake.account_usage.task_history
    where 1=1
        and scheduled_time >= dateadd(hour, -24, current_timestamp())
        and DATE_TRUNC('day', scheduled_time) = current_date() -- Today
        -- and date(scheduled_time) = '2025-02-05'
        -- and name = '<name here>'
        -- and state not in ('SUCCEEDED', 'SKIPPED')
        -- and error_message like '%<message here>%'
    order by scheduled_time;



OWNERSHIP
══════════════════════════════════════════════════════════════════════════════

  use database <DATABASE>;

  -- Show ownership of procedure
  -- Parentheses with arguments MUST be outside of double quotes for 'describe' to work.
  show grants on procedure "<DATABASE>"."<SCHEMA>"."<PROCEDURE>"(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, BOOLEAN);

  grant ownership on procedure <DATABASE>.<SCHEMA>.<PROCEDURE>(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, BOOLEAN) to role "<ROLE>" REVOKE CURRENT GRANTS;
  grant usage     on procedure <DATABASE>.<SCHEMA>.<PROCEDURE>(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, BOOLEAN) to role "<ROLE>";



GENERATE SQL FROM REQUEST
══════════════════════════════════════════════════════════════════════════════

  From:  https://stackoverflow.com/questions/62797022/cloning-a-role-or-copying-grants-to-a-new-role-in-snowflake

    show grants to role SYSADMIN;

    select 'grant all privileges on stream ' || rpad('"' || "database_name" || '"."' || "schema_name" || '"."' || "name" || '"' , 64, ' ') || ' to role "MYROLE";' as "-- SQL commands generated." from table(result_scan(last_query_id()));



TERRAFORM
══════════════════════════════════════════════════════════════════════════════

  Obtain latest version number at:
    https://registry.terraform.io/providers/Snowflake-Labs/snowflake/latest

  Plugin code at:
    https://github.com/Snowflake-Labs/terraform-provider-snowflake



MISCELLANEOUS
══════════════════════════════════════════════════════════════════════════════

  - USE SECONDARY ROLES NONE;
    USE SECONDARY ROLES ALL;

    alter user "<USERNAME>" set DEFAULT_SECONDARY_ROLES = NONE;  -- { ALL | NONE }

  -- Test table

     CREATE TABLE IF NOT EXISTS DB.SCHEMA.TABLE_NAME
     (
         STRING_COL  VARCHAR(16),
         INTEGER_COL INT NOT NULL
     );

  - show users starts with 'SVC_';  -- Here, '_' is not a wildcard but is literal.



SNOWPARK & PYTHON
══════════════════════════════════════════════════════════════════════════════

  NOTES
  ────────────────────────────────────────────────────────────────────────────

    It is as of 2024-07-11 impossible to write a Python stored procedure that
    can execute DDL statements such as "create", "drop", "grant", "revoke" and
    more.



  DOCUMENTATION
  ────────────────────────────────────────────────────────────────────────────

    Session object:

      https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/latest/snowpark/api/snowflake.snowpark.Session#snowflake.snowpark.Session


  SNOWPARK - PYTHON - EXAMPLE
  ────────────────────────────────────────────────────────────────────────────

    CREATE OR REPLACE PROCEDURE python_test_1(string_1 varchar)
    RETURNS STRING
    LANGUAGE PYTHON
    RUNTIME_VERSION = '3.11'
    PACKAGES = ('snowflake-snowpark-python')
    HANDLER = 'run'
    AS
    $$

    def run(session, string_1)
        return(f"String received:  {string_1}")
    $$;



USER MANAGEMENT
══════════════════════════════════════════════════════════════════════════════

  UNLOCK USER / CHANGE PASSWORD
  ────────────────────────────────────────────────────────────────────────────

      use role accountadmin;  -- Curiously, securityadmin is not enough.
      alter user <USERNAME> set mins_to_unlock=0;
      alter user <USERNAME> set password = '<somegoodpassword>';



TIME TRAVEL
══════════════════════════════════════════════════════════════════════════════

  Restore a database that was replaced (or dropped)
  ────────────────────────────────────────────────────────────────────────────

    If one ran 'CREATE OR REPLACE DATABASE <name>' by accident, a new database
    with the same name replaces the old one with all the old data gone.  To
    revert to the old database using time travel, one must first obtain the
    unique database id of the previous database of the same name.  This is
    accomplished with the following SELECT:

      SELECT database_id, database_name, created, deleted, comment
      FROM SNOWFLAKE.ACCOUNT_USAGE.DATABASES
      WHERE database_name = '<name>'
      AND deleted IS NOT NULL
      ORDER BY deleted;

    With the <database id> on hand, now we drop the new, current empty database:

      DROP DATABASE <name>;

    Finally, we restore the old database:

      UNDROP DATABASE IDENTIFIER(<database id>);



WAREHOUSE
══════════════════════════════════════════════════════════════════════════════

  -- List all warehouses a user has access to
  -- ────────────────────────────────────────────────────────────────────────────

  with user_role as
  (
      with u as
      (
          select USER from
          (values
            ('user1'),
            ('user2')
          ) as pseudofunctionfornewcolumn(user)
      )
      select ROLE, grantee_name as USER from snowflake.account_usage.grants_to_users
      join u on
          grantee_name = u.user
      and deleted_on is null
      -- Every user has role PUBLIC, but PUBLIC does not show up in the
      -- select above, thus the UNION below to include it.
      UNION (SELECT 'PUBLIC' AS ROLE, USER FROM u)
  )
  select user_role.USER, warehouse.NAME AS WAREHOUSE, warehouse.GRANTEE_NAME AS ROLE from snowflake.account_usage.grants_to_roles g
  join user_role on
      warehouse.grantee_name = user_role.ROLE
  and deleted_on      is null
  and granted_on      = 'WAREHOUSE'
  and privilege       = 'USAGE'
  and granted_to      = 'ROLE'
  and name not like '%SYSTEM$%'
  order by USER, WAREHOUSE;



STORAGE / SPACE TAKEN BY THE ACCOUNT
══════════════════════════════════════════════════════════════════════════════

  -- Storage as TiB (power of 1024)
  select
    USAGE_DATE,
    STORAGE_BYTES              / POW(1024,4) AS STORAGE_BYTES_AS_TIB
    STAGE_BYTES                / POW(1024,4) AS STAGE_BYTES_AS_TIB
    FAILSAFE_BYTES             / POW(1024,4) AS FAILSAFE_BYTES_AS_TIB
    HYBRID_TABLE_STORAGE_BYTES / POW(1024,4) AS HYBRID_TABLE_STORAGE_BYTES_AS_TIB
  from SNOWFLAKE.ACCOUNT_USAGE.STORAGE_USAGE order by usage_date desc limit 5;

  -- Storage as TB (power of 1000)
  select
    USAGE_DATE,
    STORAGE_BYTES              / POW(1000,4) AS STORAGE_BYTES_AS_TB
    STAGE_BYTES                / POW(1000,4) AS STAGE_BYTES_AS_TB
    FAILSAFE_BYTES             / POW(1000,4) AS FAILSAFE_BYTES_AS_TB
    HYBRID_TABLE_STORAGE_BYTES / POW(1000,4) AS HYBRID_TABLE_STORAGE_BYTES_AS_TB
  from SNOWFLAKE.ACCOUNT_USAGE.STORAGE_USAGE order by usage_date desc limit 5;

  -- Per table
  select * from snowflake.account_usage.tables;
  set LAST_QUERY_ID=(select last_query_id());
  -- select "TABLE_CATALOG" as "Database", sum("ROW_COUNT") as "Rows", sum("BYTES") as "Bytes" from table(result_scan($LAST_QUERY_ID)) where 1=1
  select * from table(result_scan($LAST_QUERY_ID)) where 1=1
  and "DELETED" is null
  and "TABLE_TYPE" = 'BASE TABLE'
  GROUP BY "TABLE_CATALOG"
  order by "Rows" desc;



GLOSSARY
══════════════════════════════════════════════════════════════════════════════

  DDL       Data Definition Language commands

            DDL commands are used to create, manipulate, and modify objects in
            Snowflake, such as users, virtual warehouses, databases, schemas,
            tables, views, columns, ..

  DML       Data Manipulation Language

            Commands for inserting, deleting, updating, and merging data in
            Snowflake tables.  Commands for performing DML operations,
            include:

              - Inserting, deleting, updating, and merging data in Snowflake
                tables.
              - Bulk copying data into and out of Snowflake tables.
              - Staging files for bulk copying.



█ ─ Copyright Notice ───────────────────────────────────────────────────
█
█ Copyright 2000-2025 Hans Deragon - AGPL 3.0 licence.
█
█ Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
█ released under the GNU Affero General Public License which can be found at:
█
█     https://www.gnu.org/licenses/agpl-3.0.en.html
█
█ ─────────────────────────────────────────────────── Copyright Notice ─
