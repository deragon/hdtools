SNOWFLAKE


LIKE
══════════════════════════════════════════════════════════════════════════════

  From:  https://docs.snowflake.com/en/sql-reference/functions/like

  - SQL wildcards are supported in pattern:

    - An underscore (_) matches any single character.

    - A percent sign (%) matches any sequence of zero or more characters.

    - There is no default escape character.

  - Wildcards in pattern include newline characters (\n) in subject as matches.

  - LIKE pattern matching covers the entire string. To match a sequence anywhere within a string, start and end the pattern with %.

  - NULL does not match NULL. In other words, if the subject is NULL and the pattern is NULL, that is not considered a match.

    'SOMETHING%' LIKE 'A-_%' ESCAPE '-';

  If you use the backslash as an escape character, then you must specify
  escape the backslash in the ESCAPE clause. For example, the following
  command specifies that the escape character is the backslash, and then
  uses that escape character to search for ‘%’ as a literal (without the
  escape character, the ‘%’ would be treated as a wildcard):

    'SOMETHING%' LIKE '%\\%%' ESCAPE '\\';



GRANT
══════════════════════════════════════════════════════════════════════════════

  Caveats
  ────────────────────────────────────────────────────────────────────────────

    Granting a privilege to a role is not enough for it to be effective.
    One must also grant "USAGE" to the schema to the role.

      grant SELECT on view "<someview>" to role <some role>;           -- Not enough
      grant USAGE on schema <schema of someview> to role <some role>;  -- Now the 'select' works.



SQL
══════════════════════════════════════════════════════════════════════════════

  TIMESTAMPS - to_timestamp_ltz()
  ────────────────────────────────────────────────────────────────────────────

    -- Queries between a specific time range.
    select *
    from table(
      information_schema.QUERY_HISTORY_BY_USER(
        USER_NAME => '<some user>',
        end_time_range_start => to_timestamp_ltz('2021-09-03 18:05:00.000 -0500'),
        end_time_range_end   => to_timestamp_ltz('2021-09-03 18:06:00.000 -0500')
       ))
    order by start_time;

    -- Queries of the last 24 hours.
    select *
    from table(
      information_schema.QUERY_HISTORY(
        end_time_range_start => TIMESTAMPADD(DAY, -1, current_timestamp()),
        end_time_range_end   => current_timestamp()
       ))
    order by start_time;


  DUAL
  ────────────────────────────────────────────────────────────────────────────

    SINGLE ROWS
    ‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑

      select 'test';  -- Oracle's 'dual' equivalent; no 'from' statement.


    MULTIPLE ROWS
    ‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑

      From:  https://stackoverflow.com/questions/63017612/how-to-select-multiple-rows-with-fake-data-in-snowflake

      -- Example #1

      select $1 AS txt,
             $2 as num
      from
        ( values
          (1,'one'),
          (2,'two'),
          (3,'three') );

      -- Example #2

      with
        fake_rows as (
          select
            1 as num,
            'one' as txt
       union
          select
            2,
            'two'
       union
          select
            3,
            'three'
        )
      select $1 AS txt,
             $2 as num
      from fake_rows;


  GROUP BY MONTH
  ────────────────────────────────────────────────────────────────────────────

    -- Number of queries per months across the whole account.
    select
      to_varchar(date_trunc('MONTH',start_time), 'YYYY-MM') as MONTH, -- DAY, MONTH, WEEK, MONTH, YEAR
      count(query_id) as number_of_queries
    from "SNOWFLAKE"."ACCOUNT_USAGE"."QUERY_HISTORY"
    group by 1 order by MONTH desc;

        MONTH      NUMBER_OF_QUERIES
        2020-02    36903
        2020-01     1572


  GROUP BY NULL
  ────────────────────────────────────────────────────────────────────────────

    select
      IFF(DELETED is NULL, 'IN SERVICE', 'DELETE' ) as STATE,
      count(*) as COUNT
    from "SNOWFLAKE"."ACCOUNT_USAGE"."STAGES"
    group by 1;


  PERCENTAGE OF TOTAL USING GROUP BY WITH COUNT() AND SUM()
  ────────────────────────────────────────────────────────────────────────────

    show users;
    set LAST_QUERY_ID=(select last_query_id());
    select count(*) as Number,
           round(Number*100/sum(number) over(), 2) as Percentage,
           "default_role"
      from table(result_scan($LAST_QUERY_ID))
      group by "default_role" order by number desc;



RESULT_SCAN
══════════════════════════════════════════════════════════════════════════════

  -- Using variables to save the last query ID.

  show pipes in account;
  set LAST_QUERY_ID=(select last_query_id());
  select * from table(result_scan($LAST_QUERY_ID));
  select "database_name" || '.' || "name", "error_integration" from table(result_scan($LAST_QUERY_ID)) where "error_integration" is not NULL;


  -- Less sophisticated requests...

  select * from table(result_scan('<uuid>')) where ...;
  select * from table(result_scan(last_query_id())) where ...;

  select last_query_id(); -- Returns à UUID to use in next statement.
  select * from table(result_scan('<UUID here>'));



  Important:

    - You must double quote (") the name of the column in the 'where' statement.
    - You must single quote (') the value to compare in the 'where' statement.

  Example:

    show grants to role sysadmin;
    select * from table(result_scan(last_query_id())) where "granted_on" = 'WAREHOUSE';



PROCEDURES
══════════════════════════════════════════════════════════════════════════════

  ⚠ IMPORTANT:

    When specifying a procedure, you must always provide the types of all the arguments,
    as procedures in Snowflake support overloading, i.e. more than one procedure
    can have the same name, but different list of arguments.

  -- Show ownership of procedure
  -- Parentheses with arguments MUST be outside of double quotes for 'describe' to work.
  show grants on procedure "<DATABASE>"."<SCHEMA>"."<PROCEDURE>"(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, BOOLEAN);

  -- Does not show the ownership.
  describe PROCEDURE "<DATABASE>"."<SCHEMA>"."<PROCEDURE>"(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, BOOLEAN);
  SHOW PROCEDURES like '<Procedure names>';  -- DOES NOT SHOW OWNERSHIP.



OWNERSHIP
══════════════════════════════════════════════════════════════════════════════

  use database <DATABASE>;

  -- Show ownership of procedure
  -- Parentheses with arguments MUST be outside of double quotes for 'describe' to work.
  show grants on procedure "<DATABASE>"."<SCHEMA>"."<PROCEDURE>"(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, BOOLEAN);

  grant ownership on procedure <DATABASE>.<SCHEMA>.<PROCEDURE>(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, BOOLEAN) to role "<ROLE>" REVOKE CURRENT GRANTS;
  grant usage     on procedure <DATABASE>.<SCHEMA>.<PROCEDURE>(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, BOOLEAN) to role "<ROLE>";



GENERATE SQL FROM REQUEST
══════════════════════════════════════════════════════════════════════════════

  From:  https://stackoverflow.com/questions/62797022/cloning-a-role-or-copying-grants-to-a-new-role-in-snowflake

    show grants to role SYSADMIN;

    select 'grant all privileges on stream ' || rpad('"' || "database_name" || '"."' || "schema_name" || '"."' || "name" || '"' , 64, ' ') || ' to role "MYROLE";' as "-- SQL commands generated." from table(result_scan(last_query_id()));



TERRAFORM
══════════════════════════════════════════════════════════════════════════════

  Obtain latest version number at:
    https://registry.terraform.io/providers/Snowflake-Labs/snowflake/latest

  Plugin code at:
    https://github.com/Snowflake-Labs/terraform-provider-snowflake



MISCELLANEOUS
══════════════════════════════════════════════════════════════════════════════

  - USE SECONDARY ROLES NONE;  -- USE SECONDARY ROLES { ALL | NONE }
    USE SECONDARY ROLES ALL;   -- USE SECONDARY ROLES { ALL | NONE }

  -- Test table

     CREATE TABLE IF NOT EXISTS DB.SCHEMA.TABLE_NAME
     (
         STRING_COL  VARCHAR(16),
         INTEGER_COL INT NOT NULL
     );

  - show users starts with 'SVC_';  -- Here, '_' is not a wildcard but is literal.



USER MANAGEMENT
══════════════════════════════════════════════════════════════════════════════

  UNLOCK USER / CHANGE PASSWORD
  ────────────────────────────────────────────────────────────────────────────

      use role accountadmin;  -- Curiously, securityadmin is not enough.
      alter user <USERNAME> set mins_to_unlock=0;
      alter user <USERNAME> set password = '<somegoodpassword>';



█ ─ Copyright Notice ───────────────────────────────────────────────────
█
█ Copyright 2000-2024 Hans Deragon - AGPL 3.0 licence.
█
█ Hans Deragon (hans@deragon.biz) owns the copyright of this work.  It is
█ released under the GNU Affero General public Picense which can be found at:
█
█     https://www.gnu.org/licenses/agpl-3.0.en.html
█
█ ─────────────────────────────────────────────────── Copyright Notice ─
